@page "/guide"
@inject ILearningProgressService ProgressService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Blazor Learning Guide</PageTitle>

<div class="min-h-screen py-8">
    <div class="w-full mx-auto px-4 max-w-6xl">
        <!-- Header Section -->
        <div class="text-center mb-12">
            <h1 class="text-4xl sm:text-5xl md:text-6xl font-bold text-gray-900 mb-4 break-words">
                📚 Blazor Learning Guide
            </h1>
            <p class="text-lg sm:text-xl md:text-2xl text-gray-600 mb-6 leading-relaxed break-words">
                Build a Trucking Schedule App - 13 Steps
            </p>
            
            <!-- Progress Ring -->
            <div class="flex flex-col items-center gap-4 mb-8">
                <div class="relative inline-flex items-center justify-center">
                    <svg class="w-32 h-32 transform -rotate-90">
                        <circle cx="64" cy="64" r="56" stroke="#e5e7eb" stroke-width="8" fill="none" />
                        <circle cx="64" cy="64" r="56" 
                                stroke="url(#gradient)" 
                                stroke-width="8" 
                                fill="none"
                                stroke-dasharray="@(2 * Math.PI * 56)"
                                stroke-dashoffset="@(2 * Math.PI * 56 * (1 - completedCount / 13.0))"
                                stroke-linecap="round"
                                class="transition-all duration-1000" />
                        <defs>
                            <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                <stop offset="0%" stop-color="#8b5cf6" />
                                <stop offset="100%" stop-color="#3b82f6" />
                            </linearGradient>
                        </defs>
                    </svg>
                    <div class="absolute inset-0 flex flex-col items-center justify-center">
                        <div class="text-3xl font-bold text-gray-900">@completedCount</div>
                        <div class="text-sm text-gray-600">of 13</div>
                    </div>
                </div>
                <div class="text-center">
                    <div class="text-lg font-semibold text-gray-800">
                        @((completedCount / 13.0 * 100).ToString("F0"))% Complete
                    </div>
                    @if (completedCount >= 4 && completedCount < 10)
                    {
                        <div class="text-sm text-green-600 font-medium">Phase 1 Complete! 🎉</div>
                    }
                    else if (completedCount >= 10 && completedCount < 13)
                    {
                        <div class="text-sm text-purple-600 font-medium">Phase 2 Complete! 🚀</div>
                    }
                    else if (completedCount == 13)
                    {
                        <div class="text-sm text-orange-600 font-medium">All Phases Complete! 🏆</div>
                    }
                </div>
            </div>
        </div>

        <!-- What You'll Learn Overview -->
        <div class="bg-gradient-to-br from-purple-50 to-blue-50 rounded-2xl p-6 sm:p-8 mb-12 border border-purple-200">
            <h3 class="text-2xl sm:text-3xl font-bold text-gray-900 mb-6 text-center">
                🎯 What You'll Learn
            </h3>
            <div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
                <div class="flex items-start gap-3 p-4 rounded-xl border border-white bg-white shadow-sm">
                    <span class="inline-flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 text-blue-600 text-xl">⚡</span>
                    <div>
                        <div class="font-semibold text-gray-900">Blazor Components</div>
                        <div class="text-sm text-gray-600">Build interactive UI</div>
                    </div>
                </div>
                <div class="flex items-start gap-3 p-4 rounded-xl border border-white bg-white shadow-sm">
                    <span class="inline-flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full bg-purple-100 text-purple-600 text-xl">🗄️</span>
                    <div>
                        <div class="font-semibold text-gray-900">Entity Framework</div>
                        <div class="text-sm text-gray-600">Database operations</div>
                    </div>
                </div>
                <div class="flex items-start gap-3 p-4 rounded-xl border border-white bg-white shadow-sm">
                    <span class="inline-flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full bg-green-100 text-green-600 text-xl">📝</span>
                    <div>
                        <div class="font-semibold text-gray-900">Forms & Validation</div>
                        <div class="text-sm text-gray-600">Input handling</div>
                    </div>
                </div>
                <div class="flex items-start gap-3 p-4 rounded-xl border border-white bg-white shadow-sm">
                    <span class="inline-flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full bg-orange-100 text-orange-600 text-xl">🚚</span>
                    <div>
                        <div class="font-semibold text-gray-900">CRUD Operations</div>
                        <div class="text-sm text-gray-600">Create, Read, Update, Delete</div>
                    </div>
                </div>
                <div class="flex items-start gap-3 p-4 rounded-xl border border-white bg-white shadow-sm">
                    <span class="inline-flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full bg-pink-100 text-pink-600 text-xl">🔄</span>
                    <div>
                        <div class="font-semibold text-gray-900">State Management</div>
                        <div class="text-sm text-gray-600">Share data between components</div>
                    </div>
                </div>
                <div class="flex items-start gap-3 p-4 rounded-xl border border-white bg-white shadow-sm">
                    <span class="inline-flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full bg-yellow-100 text-yellow-600 text-xl">📊</span>
                    <div>
                        <div class="font-semibold text-gray-900">Business Logic</div>
                        <div class="text-sm text-gray-600">Rules & calculations</div>
                    </div>
                </div>
                </div>
            </div>
        </div>

        <!-- Step 0: Prerequisites & VS Code Setup -->
        <div class="bg-black/3 rounded-2xl p-6 mb-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    <span
                        class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-gray-300 text-gray-700 text-sm">0</span>
                    🧰 Step 0: Prerequisites & VS Code Setup
                </h3>
                <span class="px-3 py-1 rounded-full bg-blue-100 text-blue-700 text-sm font-medium">Setup</span>
            </div>
            <div class="bg-white rounded-xl p-5 border border-gray-200">
                <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">
                    Get your machine ready: install the .NET SDK, Node.js (for Tailwind build), and VS Code with the C#,
                    Razor, and Tailwind CSS IntelliSense extensions.
                </p>
                <ul class="list-disc ml-5 text-sm sm:text-base text-gray-700 space-y-1 mb-4">
                    <li>Install .NET SDK (10.0+)</li>
                    <li>Install Node.js LTS and npm</li>
                    <li>Install VS Code + extensions: C#, Razor, Tailwind CSS IntelliSense</li>
                    <li>Verify tools: <span class="font-mono">dotnet --info</span>, <span class="font-mono">node
                            -v</span>, <span class="font-mono">npm -v</span></li>
                </ul>
                <div class="flex flex-wrap gap-2">
                    <a href="https://dotnet.microsoft.com/download" target="_blank" rel="noopener noreferrer"
                        class="inline-flex items-center gap-2 px-4 py-2 bg-black/85 hover:bg-black text-white text-sm sm:text-base rounded-lg transition-colors">
                        .NET Download →
                    </a>
                    <a href="https://nodejs.org/" target="_blank" rel="noopener noreferrer"
                        class="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm sm:text-base">
                        Node.js (LTS) →
                    </a>
                    <a href="https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csdevkit"
                        target="_blank" rel="noopener noreferrer"
                        class="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm sm:text-base">
                        VS Code C# →
                    </a>
                </div>
                <p class="text-xs sm:text-sm text-gray-600 mt-3">See Docs/Steps/Step00.md for the full checklist.</p>
            </div>
        </div>

        <!-- Phase 1: Entry-Level Header -->
        <div class="bg-gradient-to-r from-gray-100 to-blue-100 rounded-2xl p-6 mb-8 mt-12">
            <h2 class="text-2xl sm:text-3xl font-bold text-gray-900 mb-2 break-words">🔰 Phase 1: Entry-Level (No
                Database)</h2>
            <p class="text-sm sm:text-base text-gray-700 break-words">Learn Blazor fundamentals: components, events,
                forms, and validation.</p>
        </div>

        <!-- Step 1: New Clean Project -->
        <div class="bg-black/3 rounded-2xl p-6 mb-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    @if (step1?.IsComplete == true)
                    {
                        <span
                            class="inline-flex flex-none h-8 w-8 items-center justify-center rounded-full bg-green-500 text-white text-sm">✓</span>
                    }
                    else
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-gray-300 text-gray-700 text-sm">1</span>
                    }
                    🎯 Step 1: New Clean Project
                </h3>
                @if (step1?.IsComplete == true)
                {
                    <span class="px-3 py-1 rounded-full bg-green-100 text-green-700 text-sm font-medium">Complete</span>
                }
                else
                {
                    <span class="px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-sm font-medium">Not Started</span>
                }
            </div>
            <div class="bg-white rounded-xl p-5 border border-gray-200">
                <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">Create a new Blazor
                    Server app with interactive mode and set up Tailwind CSS v4 for styling.</p>


                <a href="/examples/step1"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-black/85 hover:bg-black text-white text-sm sm:text-base rounded-lg transition-colors">
                    <span>📖</span>
                    View Code & Details
                    <span>→</span>
                </a>
            </div>
        </div>

        <!-- Step 2: Razor Syntax & Display -->
        <div class="bg-black/3 rounded-2xl p-6 mb-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    @if (step2?.IsComplete == true)
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-green-500 text-white text-sm">✓</span>
                    }
                    else
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-gray-300 text-gray-700 text-sm">2</span>
                    }
                    🎯 Step 2: Razor Syntax & Display
                </h3>
                @if (step2?.IsComplete == true)
                {
                    <span class="px-3 py-1 rounded-full bg-green-100 text-green-700 text-sm font-medium">Complete</span>
                }
                else
                {
                    <span class="px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-sm font-medium">Not Started</span>
                }
            </div>
            <div class="bg-white rounded-xl p-5 border border-gray-200">
                <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">Learn Razor syntax with
                    @@page directive and display dynamic C# content like DateTime.</p>

                <div class="grid sm:grid-cols-2 gap-4 mb-4">
                    <div class="rounded-2xl p-4 bg-white border border-gray-200">
                        <p class="text-xs sm:text-sm text-gray-500 mb-1">Live Demo - Date</p>
                        <p class="text-base sm:text-lg font-semibold text-gray-900 break-words">
                            @DateTime.Now.ToString("dddd, MMMM dd")
                        </p>
                    </div>
                    <div class="rounded-2xl p-4 bg-white border border-gray-200">
                        <p class="text-xs sm:text-sm text-gray-500 mb-1">Live Demo - Time</p>
                        <p class="text-base sm:text-lg font-semibold text-gray-900 break-words">
                            @DateTime.Now.ToString("hh:mm:ss tt")
                        </p>
                    </div>
                </div>
                <a href="/examples/step2"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-black/85 hover:bg-black text-white text-sm sm:text-base rounded-lg transition-colors">
                    <span>📖</span>
                    View Code & Details
                    <span>→</span>
                </a>
            </div>
        </div>

        <!-- Step 3: Reusable Components -->
        <div class="bg-black/3 rounded-2xl p-6 mb-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    @if (step3?.IsComplete == true)
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-green-500 text-white text-sm">✓</span>
                    }
                    else
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-gray-300 text-gray-700 text-sm">3</span>
                    }
                    🎯 Step 3: Reusable Components
                </h3>
                @if (step3?.IsComplete == true)
                {
                    <span class="px-3 py-1 rounded-full bg-green-100 text-green-700 text-sm font-medium">Complete</span>
                }
                else
                {
                    <span class="px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-sm font-medium">Not Started</span>
                }
            </div>
            <div class="bg-white rounded-xl p-5 border border-gray-200">
                <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">Built reusable components
                    that accept parameters from parent components, enabling code reuse and composition.</p>
                <div class="grid sm:grid-cols-2 gap-4 mb-4">
                    <GreetingCard Name="John Doe" Message="Welcome to your trucking dashboard!" />
                    <GreetingCard Name="Sarah Smith" Message="Great job on your delivery!" />
                </div>
                <a href="/examples/step3"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-black/85 hover:bg-black text-white text-sm sm:text-base rounded-lg transition-colors">
                    <span>📖</span>
                    View Code & Details
                    <span>→</span>
                </a>
            </div>
        </div>

        <!-- Step 4: Event Binding -->
        <div class="bg-black/3 rounded-2xl p-6 mb-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    @if (step4?.IsComplete == true)
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-green-500 text-white text-sm">✓</span>
                    }
                    else
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-gray-300 text-gray-700 text-sm">4</span>
                    }
                    🎯 Step 4: Event Binding
                </h3>
                @if (step4?.IsComplete == true)
                {
                    <span class="px-3 py-1 rounded-full bg-green-100 text-green-700 text-sm font-medium">Complete</span>
                }
                else
                {
                    <span class="px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-sm font-medium">Not Started</span>
                }
            </div>
            <div class="bg-white rounded-xl p-5 border border-gray-200">
                <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">Handle user interactions
                    with event binding, update component state, and trigger UI re-renders automatically.</p>

                <!-- Counter Demo matching /counter styling -->
                <div class="bg-white rounded-2xl border border-gray-200 p-6 mb-4">
                    <div class="text-center mb-6">
                        <p class="text-xs sm:text-sm text-gray-500">Current count</p>
                        <p class="text-3xl sm:text-4xl font-bold text-gray-900">@currentCount</p>
                    </div>

                    <div class="flex items-center justify-center gap-2 sm:gap-3">
                        <button
                            class="px-3 sm:px-4 py-2 text-sm sm:text-base rounded-full border border-gray-200 bg-white hover:bg-gray-50"
                            @onclick="Decrement">-1</button>
                        <button
                            class="px-3 sm:px-4 py-2 text-sm sm:text-base rounded-full text-white bg-gray-900 hover:opacity-90"
                            @onclick="Increment">+1</button>
                        <button
                            class="px-3 sm:px-4 py-2 text-sm sm:text-base rounded-full border border-gray-200 bg-white hover:bg-gray-50"
                            @onclick="Reset">Reset</button>
                    </div>
                </div>

                <a href="/examples/step4"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-black/85 hover:bg-black text-white text-sm sm:text-base rounded-lg transition-colors">
                    <span>📖</span>
                    View Code & Details
                    <span>→</span>
                </a>
            </div>
        </div>

        <!-- Step 5: Forms & Validation -->
        <div class="bg-black/3 rounded-2xl p-6 mb-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    @if (step5?.IsComplete == true)
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-green-500 text-white text-sm">✓</span>
                    }
                    else
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-gray-300 text-gray-700 text-sm">5</span>
                    }
                    🎯 Step 5: Forms & Validation
                </h3>
                @if (step5?.IsComplete == true)
                {
                    <span class="px-3 py-1 rounded-full bg-green-100 text-green-700 text-sm font-medium">Complete</span>
                }
                else
                {
                    <span class="px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-sm font-medium">Not Started</span>
                }
            </div>
            <div class="bg-white rounded-xl p-5 border border-gray-200">
                <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">Create forms with
                    validation using EditForm, DataAnnotationsValidator, and validation attributes to ensure data
                    quality.</p>

                <!-- Interactive Driver Form Demo -->
                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
                    <h4 class="text-sm sm:text-base font-semibold text-gray-800 mb-3">🚗 Try It: Driver Registration
                        Form</h4>

                    <EditForm Model="driverModel" OnValidSubmit="HandleDriverSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="mb-3 text-xs sm:text-sm text-red-600" />

                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 mb-3">
                            <div>
                                <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">First
                                    Name</label>
                                <InputText
                                    class="w-full rounded-lg border border-gray-300 p-2 text-sm sm:text-base bg-white"
                                    @bind-Value="driverModel.FirstName" />
                                <ValidationMessage For="() => driverModel.FirstName"
                                    class="text-xs text-red-600 mt-1" />
                            </div>
                            <div>
                                <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Last Name</label>
                                <InputText
                                    class="w-full rounded-lg border border-gray-300 p-2 text-sm sm:text-base bg-white"
                                    @bind-Value="driverModel.LastName" />
                                <ValidationMessage For="() => driverModel.LastName" class="text-xs text-red-600 mt-1" />
                            </div>
                            <div>
                                <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Email</label>
                                <InputText type="email"
                                    class="w-full rounded-lg border border-gray-300 p-2 text-sm sm:text-base bg-white"
                                    @bind-Value="driverModel.Email" />
                                <ValidationMessage For="() => driverModel.Email" class="text-xs text-red-600 mt-1" />
                            </div>
                            <div>
                                <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Years
                                    Experience</label>
                                <InputNumber
                                    class="w-full rounded-lg border border-gray-300 p-2 text-sm sm:text-base bg-white"
                                    @bind-Value="driverModel.YearsExperience" />
                                <ValidationMessage For="() => driverModel.YearsExperience"
                                    class="text-xs text-red-600 mt-1" />
                            </div>
                        </div>

                        <div class="flex flex-wrap items-center gap-2">
                            <button type="submit"
                                class="px-4 py-2 text-sm sm:text-base rounded-lg bg-orange-600 hover:bg-orange-700 text-white transition-colors">
                                Submit Driver
                            </button>
                            <button type="button"
                                class="px-4 py-2 text-sm sm:text-base rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors"
                                @onclick="ResetDriverForm">
                                Reset
                            </button>
                        </div>
                    </EditForm>

                    @if (driverSubmitted)
                    {
                        <div class="mt-3 rounded-lg border border-green-200 p-3 bg-green-50">
                            <div class="text-sm font-semibold text-green-800 mb-1">✅ Driver Registered Successfully!</div>
                            <div class="text-xs sm:text-sm text-green-700">
                                <div><strong>Name:</strong> @driverModel.FirstName @driverModel.LastName</div>
                                <div><strong>Email:</strong> @driverModel.Email</div>
                                <div><strong>Experience:</strong> @driverModel.YearsExperience years</div>
                            </div>
                        </div>
                    }
                </div>

                <a href="/examples/step5"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-black/85 hover:bg-black text-white text-sm sm:text-base rounded-lg transition-colors">
                    <span>📖</span>
                    View Code & Details
                    <span>→</span>
                </a>
            </div>
        </div>

        <!-- Phase 2: Intermediate Header -->
        <div class="bg-gradient-to-r from-purple-100 to-blue-100 rounded-2xl p-6 mb-8 mt-12">
            <h2 class="text-2xl sm:text-3xl font-bold text-gray-900 mb-2 break-words">🧩 Phase 2: Intermediate (Database
                & State)</h2>
            <p class="text-sm sm:text-base text-gray-700 break-words">Learn Entity Framework Core, database operations,
                and state management.</p>
        </div>

        <!-- Step 6: Routing & Navigation -->
        <div class="bg-black/3 rounded-2xl p-6 mb-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    @if (step6?.IsComplete == true)
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-green-500 text-white text-sm">✓</span>
                    }
                    else
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-purple-500 text-white text-sm">6</span>
                    }
                    🎯 Step 6: Routing & Navigation
                </h3>
                @if (step6?.IsComplete == true)
                {
                    <span class="px-3 py-1 rounded-full bg-green-100 text-green-700 text-sm font-medium">Complete</span>
                }
                else
                {
                    <span class="px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-sm font-medium">Not Started</span>
                }
            </div>
            <div class="bg-white rounded-xl p-5 border border-gray-200 mb-4">
                <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">Master page routing with
                    the @@page directive, build navigation menus with NavLink, and navigate programmatically.</p>

                <!-- Interactive Demo -->
                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
                    <h4 class="font-semibold text-gray-800 mb-3 text-sm sm:text-base">🎮 Try It: Interactive Navigation
                        Demo</h4>
                    <p class="text-xs sm:text-sm text-gray-600 mb-3 break-words">Test navigation features right here on
                        the guide page!</p>

                    <div class="space-y-3">
                        <!-- NavLink Examples -->
                        <div class="bg-white rounded-lg p-3 border border-gray-200">
                            <p class="text-xs font-semibold text-gray-700 mb-2">NavLink (declarative navigation):</p>
                            <div class="flex flex-wrap gap-2">
                                <a href="/"
                                    class="px-3 py-1.5 bg-blue-600 hover:bg-blue-700 text-white rounded text-xs sm:text-sm transition-colors">
                                    → Home
                                </a>
                                <a href="/counter"
                                    class="px-3 py-1.5 bg-blue-600 hover:bg-blue-700 text-white rounded text-xs sm:text-sm transition-colors">
                                    → Counter
                                </a>
                                <a href="/tips"
                                    class="px-3 py-1.5 bg-blue-600 hover:bg-blue-700 text-white rounded text-xs sm:text-sm transition-colors">
                                    → Tips
                                </a>
                            </div>
                        </div>

                        <!-- NavigationManager Example -->
                        <div class="bg-white rounded-lg p-3 border border-gray-200">
                            <p class="text-xs font-semibold text-gray-700 mb-2">NavigationManager (programmatic
                                navigation):</p>
                            <div class="flex flex-wrap gap-2">
                                <button @onclick="NavigateToProgress"
                                    class="px-3 py-1.5 bg-green-600 hover:bg-green-700 text-white rounded text-xs sm:text-sm transition-colors">
                                    ▶ Navigate to Progress
                                </button>
                                <button @onclick="NavigateToDriverForm"
                                    class="px-3 py-1.5 bg-green-600 hover:bg-green-700 text-white rounded text-xs sm:text-sm transition-colors">
                                    ▶ Navigate to Driver Form
                                </button>
                            </div>
                        </div>

                        <!-- Current Location Display -->
                        <div class="bg-white rounded-lg p-3 border border-gray-200">
                            <p class="text-xs font-semibold text-gray-700 mb-1">Current URL:</p>
                            <code class="text-xs text-purple-600 break-all">@currentUrl</code>
                        </div>
                    </div>
                </div>

                <a href="/examples/step6"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white text-sm sm:text-base rounded-lg transition-colors">
                    <span>📖</span>
                    View Code & Details
                    <span>→</span>
                </a>
            </div>
        </div>

        <!-- Step 7: EF Core Models -->
        <div class="bg-black/3 rounded-2xl p-6 mb-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    @if (step7?.IsComplete == true)
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-green-500 text-white text-sm">✓</span>
                    }
                    else
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-purple-500 text-white text-sm">7</span>
                    }
                    🎯 Step 7: EF Core Models
                </h3>
                @if (step7?.IsComplete == true)
                {
                    <span class="px-3 py-1 rounded-full bg-green-100 text-green-700 text-sm font-medium">Complete</span>
                }
                else
                {
                    <span class="px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-sm font-medium">Not Started</span>
                }
            </div>
            <div class="bg-white rounded-xl p-5 border border-gray-200">
                <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">Create domain models for
                    Entity Framework Core with data annotations, enums, and relationships between Driver, Truck, and
                    Route.</p>

                <!-- Minimal Inline Example (Models only) -->
                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
                    <p class="text-xs sm:text-sm text-gray-600 mb-2">📝 Minimum Example:</p>
                    <div class="grid gap-3">
                        <pre
                            class="text-[11px] sm:text-xs text-gray-800 font-mono bg-white border border-gray-200 rounded p-3 overflow-x-auto"><code>public enum LicenseLevel { ClassC = 1, ClassB = 2, ClassA = 3 }</code></pre>
                        <pre
                            class="text-[11px] sm:text-xs text-gray-800 font-mono bg-white border border-gray-200 rounded p-3 overflow-x-auto"><code>using System.ComponentModel.DataAnnotations;
public class Driver {
  public int Id { get; set; }
  [Required, StringLength(100)] public string Name { get; set; } = string.Empty;
  [Required] public LicenseLevel LicenseLevel { get; set; }
  [Range(0,50)] public int YearsOfExperience { get; set; }
  public ICollection&lt;Route&gt; Routes { get; set; } = new List&lt;Route&gt;();
}</code></pre>
                        <pre
                            class="text-[11px] sm:text-xs text-gray-800 font-mono bg-white border border-gray-200 rounded p-3 overflow-x-auto"><code>public class Route {
  public int Id { get; set; }
  [Required, StringLength(200)] public string Destination { get; set; } = string.Empty;
  public int DriverId { get; set; }
  public Driver Driver { get; set; } = null!;
}</code></pre>
                    </div>
                    <p class="mt-2 text-[11px] sm:text-xs text-gray-600">Scope check: models only (DbContext and
                        migrations come in Step 8).</p>
                </div>
                <a href="/examples/step7"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white text-sm sm:text-base rounded-lg transition-colors">
                    <span>📖</span>
                    View Code & Details
                    <span>→</span>
                </a>
            </div>
        </div>

        <!-- Step 8: DbContext Setup -->
        <div class="bg-black/3 rounded-2xl p-6 mb-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    @if (step8?.IsComplete == true)
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-green-500 text-white text-sm">✓</span>
                    }
                    else
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-purple-500 text-white text-sm">8</span>
                    }
                    🎯 Step 8: DbContext Setup
                </h3>
                @if (step8?.IsComplete == true)
                {
                    <span class="px-3 py-1 rounded-full bg-green-100 text-green-700 text-sm font-medium">Complete</span>
                }
                else
                {
                    <span class="px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-sm font-medium">Not Started</span>
                }
            </div>
            <div class="bg-white rounded-xl p-5 border border-gray-200">
                <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">Configure Entity
                    Framework Core with SQLite, create <span class="font-mono">AppDbContext</span>, set up connection
                    strings, and create/apply
                    your first migration. This project applies pending migrations on startup in development.</p>
                <div class="bg-gray-50 border border-gray-200 rounded-lg p-3 mb-4">
                    <p class="text-xs sm:text-sm text-gray-700 mb-2">Quick CLI (run in project folder):</p>
                    <ul class="list-disc ml-5 space-y-1 text-[11px] sm:text-xs text-gray-700">
                        <li>dotnet tool install --global dotnet-ef <span class="text-gray-500">(once)</span></li>
                        <li>dotnet ef migrations add InitialCreate</li>
                        <li>dotnet ef database update</li>
                    </ul>
                </div>
                <a href="/examples/step8"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white text-sm sm:text-base rounded-lg transition-colors">
                    <span>📖</span>
                    View Code & Details
                    <span>→</span>
                </a>
            </div>
        </div>

        <!-- Step 9: CRUD Operations -->
        <div class="bg-black/3 rounded-2xl p-6 mb-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    @if (step9?.IsComplete == true)
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-green-500 text-white text-sm">✓</span>
                    }
                    else
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-purple-500 text-white text-sm">9</span>
                    }
                    🎯 Step 9: CRUD Operations
                </h3>
                @if (step9?.IsComplete == true)
                {
                    <span class="px-3 py-1 rounded-full bg-green-100 text-green-700 text-sm font-medium">Complete</span>
                }
                else
                {
                    <span class="px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-sm font-medium">Not Started</span>
                }
            </div>
            <div class="bg-white rounded-xl p-5 border border-gray-200">
                <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">Learn to Create, Read,
                    Update, and Delete database records. Master async operations, <span
                        class="font-mono">Include()</span> for related data, and
                    EditForm integration.</p>
                <div class="grid grid-cols-1 sm:grid-cols-3 gap-2 mb-4">
                    <a href="/drivers"
                        class="px-3 py-2 bg-white border border-gray-200 rounded-lg text-sm hover:bg-gray-50">Drivers
                        CRUD →</a>
                    <a href="/trucks"
                        class="px-3 py-2 bg-white border border-gray-200 rounded-lg text-sm hover:bg-gray-50">Trucks
                        CRUD →</a>
                    <a href="/routes"
                        class="px-3 py-2 bg-white border border-gray-200 rounded-lg text-sm hover:bg-gray-50">Routes
                        CRUD (+ Include) →</a>
                </div>
                <p class="text-xs sm:text-sm text-gray-600 mb-2">Note: In Development, sample Drivers, Trucks, and
                    Routes are auto-seeded so you can explore lists immediately.</p>
                <a href="/examples/step9"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white text-sm sm:text-base rounded-lg transition-colors">
                    <span>📖</span>
                    View Code & Details
                    <span>→</span>
                </a>
                @if (OperatingSystem.IsWindows() && Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ==
                                "Development")
                {
                    <div class="mt-3">
                        <button @onclick="ResetSampleDataAsync"
                            class="px-3 py-2 text-xs sm:text-sm rounded-lg border border-gray-300 hover:bg-gray-50">Reset
                            sample data (Dev)</button>
                        @if (!string.IsNullOrEmpty(resetMessage))
                        {
                            <div class="mt-2 text-xs text-gray-600">@resetMessage</div>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Step 10: State Management -->
        <div class="bg-black/3 rounded-2xl p-6 mb-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    @if (step10?.IsComplete == true)
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-green-500 text-white text-sm">✓</span>
                    }
                    else
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-purple-500 text-white text-sm">10</span>
                    }
                    🎯 Step 10: State Management
                </h3>
                @if (step10?.IsComplete == true)
                {
                    <span class="px-3 py-1 rounded-full bg-green-100 text-green-700 text-sm font-medium">Complete</span>
                }
                else
                {
                    <span class="px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-sm font-medium">Not Started</span>
                }
            </div>
            <div class="bg-white rounded-xl p-5 border border-gray-200">
                <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">Share data between
                    components using state services. Learn about service lifetimes, events, and the StateHasChanged()
                    method.</p>
                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
                    <h4 class="font-semibold text-gray-800 mb-3 text-sm sm:text-base">🎮 Try It: Shared Selection (State Service)</h4>
                    <p class="text-xs sm:text-sm text-gray-600 mb-3">Pick a driver in the left dropdown; the selection immediately appears on the right—both bound through a shared scoped service.</p>
                    <div class="grid sm:grid-cols-2 gap-3">
                        <div class="bg-white rounded-lg border border-gray-200 p-3">
                            <label class="block text-xs text-gray-600 mb-1">Select Driver</label>
                            <select class="w-full rounded border border-gray-300 p-2 text-sm" @onchange="OnG10PickDriver">
                                <option value="">-- Choose --</option>
                                @foreach (var d in g10Drivers)
                                {
                                    <option value="@d.Id">@d.Name (@d.LicenseLevel)</option>
                                }
                            </select>
                            @if (!g10Drivers.Any())
                            {
                                <div class="mt-2 text-[11px] text-gray-500">No drivers found in database.</div>
                            }
                        </div>
                        <div class="bg-white rounded-lg border border-gray-200 p-3">
                            <div class="text-xs text-gray-600 mb-1">Current Selection</div>
                            @if (g10Selected is null)
                            {
                                <div class="text-xs sm:text-sm text-gray-700">No driver selected</div>
                            }
                            else
                            {
                                <div class="text-xs sm:text-sm text-gray-900"><strong>@g10Selected.Name</strong> · @g10Selected.LicenseLevel · @g10Selected.YearsOfExperience yrs</div>
                            }
                            <div class="mt-2">
                                <button class="px-3 py-1.5 rounded border border-gray-300 hover:bg-gray-50 text-xs sm:text-sm" @onclick="ClearG10Selection">Clear</button>
                            </div>
                        </div>
                    </div>
                </div>
                <a href="/examples/step10"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white text-sm sm:text-base rounded-lg transition-colors">
                    <span>📖</span>
                    View Code & Details
                    <span>→</span>
                </a>
            </div>
        </div>

        <!-- Phase 3: Advanced Header -->
        <div class="bg-gradient-to-r from-orange-100 to-red-100 rounded-2xl p-6 mb-8 mt-12">
            <h2 class="text-2xl sm:text-3xl font-bold text-gray-900 mb-2 break-words">🚀 Phase 3: Advanced (Business
                Logic & Dashboards)</h2>
            <p class="text-sm sm:text-base text-gray-700 break-words">Implement business rules, calculations, and data
                visualization.</p>
        </div>

        <!-- Step 11: Assignment Logic -->
        <div class="bg-black/3 rounded-2xl p-6 mb-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    @if (step11?.IsComplete == true)
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-green-500 text-white text-sm">✓</span>
                    }
                    else
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-orange-500 text-white text-sm">11</span>
                    }
                    🎯 Step 11: Assignment Logic
                </h3>
                @if (step11?.IsComplete == true)
                {
                    <span class="px-3 py-1 rounded-full bg-green-100 text-green-700 text-sm font-medium">Complete</span>
                }
                else
                {
                    <span class="px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-sm font-medium">Not Started</span>
                }
            </div>
            <div class="bg-white rounded-xl p-5 border border-gray-200">
                <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">Implement business rules
                    to validate driver-truck-route assignments. Check license levels, experience requirements, and
                    availability.</p>

                <!-- Inline Demo: Assignment Validator -->
                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
                    <h4 class="font-semibold text-gray-800 mb-3 text-sm sm:text-base">🧪 Try It: Assignment Validator</h4>

                    <div class="grid sm:grid-cols-3 gap-3 mb-4">     <div>
                            <label class="block text-xs text-gray-600 mb-1">Route Type</label>
                            <select class="w-full rounded border border-gray-300 p-2 text-sm" value="@(g11SelectedRouteType?.ToString() ?? string.Empty)" @onchange="OnG11RouteTypeChanged">
                                <option value="">-- Select Route Type --</option>
                                @foreach (var rt in g11RouteTypes)
                                {
                                    <option value="@rt">@rt</option>
                                }
                            </select>
                        </div>
                      
                        <div>
                            <label class="block text-xs text-gray-600 mb-1">Truck</label>
                            <select class="w-full rounded border border-gray-300 p-2 text-sm" value="@g11SelectedTruckId" @onchange="OnG11TruckChanged">
                                <option value="">-- Select Truck --</option>
                                @foreach (var t in g11Trucks)
                                {
                                    <option value="@t.Id">@t.DisplayName (@t.Class)</option>
                                }
                            </select>
                        </div>  <div>
                            <label class="block text-xs text-gray-600 mb-1">Driver</label>
                            <select class="w-full rounded border border-gray-300 p-2 text-sm" value="@g11SelectedDriverId" @onchange="OnG11DriverChanged">
                                <option value="">-- Select Driver --</option>
                                @foreach (var d in g11Drivers)
                                {
                                    <option value="@d.Id">@d.Name (@d.LicenseLevel, @d.YearsOfExperience yrs)</option>
                                }
                            </select>
                        </div>
                   
                    </div>

                    @if (g11Warnings.Any())
                    {
                        <div class="rounded border-l-4 border-yellow-500 bg-yellow-50 p-3 mb-3">
                            <div class="text-xs sm:text-sm text-yellow-800 font-semibold mb-1">Validation Warnings</div>
                            <ul class="text-xs sm:text-sm text-yellow-800 list-disc ml-5 space-y-1">
                                @foreach (var w in g11Warnings)
                                {
                                    <li>@w</li>
                                }
                            </ul>
                        </div>
                    }

                    <div class="flex items-center justify-between">
                        <div class="text-xs sm:text-sm">
                            <span class="font-semibold">Status:</span>
                            @if (g11IsValid)
                            {
                                <span class="text-green-700">✅ Valid assignment</span>
                            }
                            else
                            {
                                <span class="text-red-700">❌ Not valid</span>
                            }
                        </div>
                        <button class="px-3 py-1.5 rounded border border-gray-300 hover:bg-gray-50 text-xs sm:text-sm" @onclick="ResetG11Demo">Reset</button>
                    </div>
                </div>
                <a href="/examples/step11"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white text-sm sm:text-base rounded-lg transition-colors">
                    <span>📖</span>
                    View Code & Details
                    <span>→</span>
                </a>
            </div>
        </div>

        <!-- Step 12: Pay Calculation -->
        <div class="bg-black/3 rounded-2xl p-6 mb-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    @if (step12?.IsComplete == true)
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-green-500 text-white text-sm">✓</span>
                    }
                    else
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-orange-500 text-white text-sm">12</span>
                    }
                    🎯 Step 12: Pay Calculation
                </h3>
                @if (step12?.IsComplete == true)
                {
                    <span class="px-3 py-1 rounded-full bg-green-100 text-green-700 text-sm font-medium">Complete</span>
                }
                else
                {
                    <span class="px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-sm font-medium">Not Started</span>
                }
            </div>
            <div class="bg-white rounded-xl p-5 border border-gray-200">
                <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">Build calculation
                    services for driver pay, fuel costs, and profit margins. Learn financial formulas and route cost
                    estimation.</p>

                <!-- Inline Demo: Pay & Expense Calculation -->
                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
                    <h4 class="font-semibold text-gray-800 mb-3 text-sm sm:text-base">💵 Try It: Pay & Expense Demo</h4>

                    <!-- Controls -->
                    <div class="grid sm:grid-cols-3 gap-3 mb-4">
                        <div>
                            <label class="block text-xs text-gray-600 mb-1">Base Rate per Mile</label>
                            <InputNumber @bind-Value="s12BaseRatePerMile" step="0.01"
                                class="w-full rounded border border-gray-300 p-2" />
                        </div>
                        <div>
                            <label class="block text-xs text-gray-600 mb-1">Overtime Rate (per hour)</label>
                            <InputNumber @bind-Value="s12OvertimeRatePerHour" step="1"
                                class="w-full rounded border border-gray-300 p-2" />
                        </div>
                        <div class="flex items-end gap-2">
                            <button
                                class="px-3 py-1.5 rounded bg-blue-600 hover:bg-blue-700 text-white text-xs sm:text-sm"
                                @onclick="ApplyS12GlobalRates">Apply Rates</button>
                            <button
                                class="px-3 py-1.5 rounded border border-gray-300 hover:bg-gray-50 text-xs sm:text-sm"
                                @onclick="ResetDemoTrips">Reset Sample</button>
                        </div>
                    </div>

                    <!-- KPIs -->
                    <div class="grid sm:grid-cols-4 gap-3 mb-4">
                        <div class="rounded border p-3">
                            <div class="text-xs text-gray-500">Total Miles</div>
                            <div class="text-xl font-semibold">@s12Totals.TotalMiles</div>
                        </div>
                        <div class="rounded border p-3">
                            <div class="text-xs text-gray-500">Total Pay</div>
                            <div class="text-xl font-semibold">@s12Totals.TotalPay.ToString("C")</div>
                        </div>
                        <div class="rounded border p-3">
                            <div class="text-xs text-gray-500">Total Expenses</div>
                            <div class="text-xl font-semibold">@s12Totals.TotalExpenses.ToString("C")</div>
                        </div>
                        <div class="rounded border p-3">
                            <div class="text-xs text-gray-500">Avg Cost / Mile</div>
                            <div class="text-xl font-semibold">@(s12Totals.TotalMiles == 0 ? "-" :
                                                                (s12Totals.TotalExpenses / s12Totals.TotalMiles).ToString("C"))</div>
                        </div>
                    </div>

                    <!-- Driver comparison bars -->
                    <div class="space-y-3">
                        @foreach (var row in s12DriverSummaries)
                        {
                            var total = row.Pay + row.Expenses;
                            var payPct = total == 0 ? 0 : (row.Pay / total) * 100m;
                            var expPct = 100m - payPct;
                            <div class="space-y-1">
                                <div class="flex items-center justify-between text-xs sm:text-sm">
                                    <div class="font-medium">@row.Driver</div>
                                    <div class="text-gray-600">Pay @row.Pay.ToString("C") · Exp @row.Expenses.ToString("C")
                                    </div>
                                </div>
                                <div class="h-3 w-full rounded bg-gray-200 overflow-hidden">
                                    <div class="h-full bg-green-500" style="width:@payPct%"></div>
                                    <div class="h-full bg-amber-500 -mt-3" style="width:@expPct%"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <a href="/examples/step12"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white text-sm sm:text-base rounded-lg transition-colors">
                    <span>📖</span>
                    View Code & Details
                    <span>→</span>
                </a>
            </div>
        </div>

        <!-- Step 13: Dashboard -->
        <div class="bg-black/3 rounded-2xl p-6 mb-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    @if (step13?.IsComplete == true)
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-green-500 text-white text-sm">✓</span>
                    }
                    else
                    {
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-orange-500 text-white text-sm">13</span>
                    }
                    🎯 Step 13: Dashboard & Reports
                </h3>
                @if (step13?.IsComplete == true)
                {
                    <span class="px-3 py-1 rounded-full bg-green-100 text-green-700 text-sm font-medium">Complete</span>
                }
                else
                {
                    <span class="px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-sm font-medium">Not Started</span>
                }
            </div>
            <div class="bg-white rounded-xl p-5 border border-gray-200">
                <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">Build a professional
                    dashboard with KPI cards, data filtering, financial summaries, and visual status indicators using
                    LINQ aggregation.</p>
                <!-- Inline Demo: Dashboard & Reports -->
                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
                    <h4 class="font-semibold text-gray-800 mb-3 text-sm sm:text-base">📊 Try It: Mini Dashboard</h4>

                    <!-- Controls -->
                    <div class="grid sm:grid-cols-3 gap-3 mb-4">
                        <div>
                            <label class="block text-xs text-gray-600 mb-1">Customer Rate per Mile</label>
                            <InputNumber @bind-Value="s13CustomerRatePerMile" step="0.01"
                                class="w-full rounded border border-gray-300 p-2" />
                        </div>
                        <div class="flex items-end">
                            <button
                                class="px-3 py-1.5 rounded bg-blue-600 hover:bg-blue-700 text-white text-xs sm:text-sm"
                                @onclick="RecomputeS13">Recalculate</button>
                        </div>
                    </div>

                    <!-- KPI cards -->
                    <div class="grid sm:grid-cols-4 gap-3 mb-4">
                        <div class="rounded border p-3">
                            <div class="text-xs text-gray-500">Total Miles</div>
                            <div class="text-xl font-semibold">@s13Totals.TotalMiles</div>
                        </div>
                        <div class="rounded border p-3">
                            <div class="text-xs text-gray-500">Revenue</div>
                            <div class="text-xl font-semibold">@s13Totals.Revenue.ToString("C")</div>
                        </div>
                        <div class="rounded border p-3">
                            <div class="text-xs text-gray-500">Cost (Pay + Expenses)</div>
                            <div class="text-xl font-semibold">@s13Totals.Cost.ToString("C")</div>
                        </div>
                        <div class="rounded border p-3">
                            <div class="text-xs text-gray-500">Profit</div>
                            <div class="text-xl font-semibold">@s13Totals.Profit.ToString("C")</div>
                        </div>
                    </div>

                    <!-- Profit by Driver bars -->
                    <div class="space-y-3">
                        @foreach (var row in s13DriverSummaries)
                        {
                            var width = s13MaxProfit <= 0 ? 0 : (row.Profit / s13MaxProfit) * 100m;
                            <div class="space-y-1">
                                <div class="flex items-center justify-between text-xs sm:text-sm">
                                    <div class="font-medium">@row.Driver</div>
                                    <div class="text-gray-600">Rev @row.Revenue.ToString("C") · Cost @row.Cost.ToString("C")
                                        · Profit <span class="font-medium">@row.Profit.ToString("C")</span></div>
                                </div>
                                <div class="h-3 w-full rounded bg-gray-200 overflow-hidden">
                                    <div class="h-full bg-blue-600" style="width:@width%"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <a href="/examples/step13"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white text-sm sm:text-base rounded-lg transition-colors">
                    <span>📖</span>
                    View Code & Details
                    <span>→</span>
                </a>
            </div>
        </div>

        <!-- Quick Links Section -->
        <div class="bg-black/3 rounded-2xl mt-12">
            <div class="bg-black/90 rounded-2xl p-5 sm:p-6 text-white">
                <h3 class="text-lg sm:text-xl font-semibold mb-4 text-center break-words">📚 Learning Resources</h3>
                <div class="grid sm:grid-cols-2 md:grid-cols-3 gap-4 mb-4">
                    <a href="/guide" class="bg-white/10 hover:bg-white/20 rounded-xl p-4 transition-colors">
                        <div class="flex items-center gap-3">
                            <span class="text-2xl flex-shrink-0">📖</span>
                            <div class="min-w-0">
                                <div class="text-sm sm:text-base font-semibold break-words">Full Learning Guide</div>
                                <div class="text-xs sm:text-sm text-gray-300 break-words">Detailed steps with code
                                    examples</div>
                            </div>
                        </div>
                    </a>
                    <a href="/tips" class="bg-white/10 hover:bg-white/20 rounded-xl p-4 transition-colors">
                        <div class="flex items-center gap-3">
                            <span class="text-2xl flex-shrink-0">💡</span>
                            <div class="min-w-0">
                                <div class="text-sm sm:text-base font-semibold break-words">Tips System</div>
                                <div class="text-xs sm:text-sm text-gray-300 break-words">Browse 20+ Blazor & C# topics
                                </div>
                            </div>
                        </div>
                    </a>
                    <a href="/progress" class="bg-white/10 hover:bg-white/20 rounded-xl p-4 transition-colors">
                        <div class="flex items-center gap-3">
                            <span class="text-2xl flex-shrink-0">📊</span>
                            <div class="min-w-0">
                                <div class="text-sm sm:text-base font-semibold break-words">Track Progress</div>
                                <div class="text-xs sm:text-sm text-gray-300 break-words">View all 13 steps & completion
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
                <div class="text-center text-xs sm:text-sm text-gray-300 break-words">
                    <strong>Progress:</strong> @completedCount/13 steps complete @if (completedCount >= 4) {
                    <span>-
                        Phase 1 ✅</span>
                                        }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int currentCount = 0;
    private StepProgress? step1, step2, step3, step4, step5, step6, step7, step8, step9, step10, step11, step12, step13;
    private int completedCount = 0;
    private string currentUrl = "";

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadProgressAsync();
        UpdateCurrentUrl();
        Navigation.LocationChanged += OnLocationChanged;
        await LoadG10DriversAsync();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateCurrentUrl();
        StateHasChanged();
    }

    private void UpdateCurrentUrl()
    {
        currentUrl = Navigation.Uri;
    }

    private async Task LoadProgressAsync()
    {
        step1 = await ProgressService.GetStepAsync(1);
        step2 = await ProgressService.GetStepAsync(2);
        step3 = await ProgressService.GetStepAsync(3);
        step4 = await ProgressService.GetStepAsync(4);
        step5 = await ProgressService.GetStepAsync(5);
        step6 = await ProgressService.GetStepAsync(6);
        step7 = await ProgressService.GetStepAsync(7);
        step8 = await ProgressService.GetStepAsync(8);
        step9 = await ProgressService.GetStepAsync(9);
        step10 = await ProgressService.GetStepAsync(10);
        step11 = await ProgressService.GetStepAsync(11);
        step12 = await ProgressService.GetStepAsync(12);
        step13 = await ProgressService.GetStepAsync(13);
        completedCount = await ProgressService.GetCompletedCountAsync();

        // Initialize inline demo data (Steps 12 & 13)
        InitializeDemoTrips();
        RecomputeS12();
        RecomputeS13();
    }

    private void Increment() => currentCount++;
    private void Decrement() => currentCount--;
    private void Reset() => currentCount = 0;

    // Interactive driver form demo for Step 5
    private DriverFormModel driverModel = new();
    private bool driverSubmitted = false;

    private void HandleDriverSubmit()
    {
        driverSubmitted = true;
    }

    private void ResetDriverForm()
    {
        driverModel = new();
        driverSubmitted = false;
    }

    // Interactive navigation demo methods for Step 6
    private void NavigateToProgress()
    {
        Navigation.NavigateTo("/progress");
    }

    private void NavigateToDriverForm()
    {
        Navigation.NavigateTo("/driver-form");
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }

    // Driver form model for Step 5 demo
    public class DriverFormModel
    {
        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, ErrorMessage = "First name must be less than 50 characters")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, ErrorMessage = "Last name must be less than 50 characters")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Range(0, 60, ErrorMessage = "Years of experience must be between 0 and 60")]
        public int? YearsExperience { get; set; }
    }

    // Dev-only: Reset sample data
    private string? resetMessage;
    private async Task ResetSampleDataAsync()
    {
        try
        {
            using var http = new HttpClient { BaseAddress = new Uri(Navigation.BaseUri) };
            var resp = await http.PostAsync("dev/reset-sample-data", null);
            resetMessage = resp.IsSuccessStatusCode ? "Sample data reset. Refreshing..." : $"Reset failed: {resp.StatusCode}";
            if (resp.IsSuccessStatusCode)
            {
                await Task.Delay(600);
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            resetMessage = $"Reset error: {ex.Message}";
        }
    }

    // ===== Inline Demos: Step 12 (Pay & Expense) and Step 13 (Mini Dashboard) =====
    // Shared sample trips used by both demos
    private decimal s12BaseRatePerMile = 0.65m;
    private decimal s12OvertimeRatePerHour = 30m;
    private decimal s13CustomerRatePerMile = 2.10m;

    private List<DemoTrip> s12Trips = new();

    // Step 12 aggregates
    private Step12Totals s12Totals = new();
    private List<Step12DriverSummary> s12DriverSummaries = new();

    // Step 13 aggregates
    private Step13Totals s13Totals = new();
    private List<Step13DriverSummary> s13DriverSummaries = new();
    private decimal s13MaxProfit = 0m;

    private void InitializeDemoTrips()
    {
        s12Trips = new()
{
new DemoTrip { Driver = "Alex", Miles = 420, RatePerMile = s12BaseRatePerMile, PerDiem = 35m, OvertimeHours = 1m,
OvertimeRatePerHour = s12OvertimeRatePerHour, FuelCost = 160m },
new DemoTrip { Driver = "Alex", Miles = 310, RatePerMile = s12BaseRatePerMile, PerDiem = 35m, OvertimeHours = 0m,
OvertimeRatePerHour = s12OvertimeRatePerHour, FuelCost = 120m },
new DemoTrip { Driver = "Sam", Miles = 520, RatePerMile = s12BaseRatePerMile, PerDiem = 45m, OvertimeHours = 2m,
OvertimeRatePerHour = s12OvertimeRatePerHour, FuelCost = 210m },
new DemoTrip { Driver = "Sam", Miles = 290, RatePerMile = s12BaseRatePerMile, PerDiem = 35m, OvertimeHours = 0m,
OvertimeRatePerHour = s12OvertimeRatePerHour, FuelCost = 115m },
};
    }

    private void ResetDemoTrips()
    {
        InitializeDemoTrips();
        RecomputeS12();
        RecomputeS13();
    }

    private void ApplyS12GlobalRates()
    {
        foreach (var t in s12Trips)
        {
            t.RatePerMile = s12BaseRatePerMile;
            t.OvertimeRatePerHour = s12OvertimeRatePerHour;
        }
        RecomputeS12();
        RecomputeS13();
    }

    private decimal ComputeS12Pay(DemoTrip t)
    => (t.Miles * t.RatePerMile) + (t.OvertimeHours * t.OvertimeRatePerHour) + t.PerDiem;

    private void RecomputeS12()
    {
        s12Totals = new Step12Totals
        {
            TotalMiles = s12Trips.Sum(x => x.Miles),
            TotalPay = s12Trips.Sum(ComputeS12Pay),
            TotalExpenses = s12Trips.Sum(x => x.FuelCost)
        };

        s12DriverSummaries = s12Trips
        .GroupBy(t => t.Driver)
        .Select(g => new Step12DriverSummary
        {
            Driver = g.Key,
            Pay = g.Sum(ComputeS12Pay),
            Expenses = g.Sum(x => x.FuelCost)
        })
        .OrderByDescending(x => x.Pay)
        .ToList();
    }

    private void RecomputeS13()
    {
        // Compute totals
        var totalMiles = s12Trips.Sum(t => t.Miles);
        var revenue = s12Trips.Sum(t => t.Miles * s13CustomerRatePerMile);
        var cost = s12Trips.Sum(ComputeS12Pay) + s12Trips.Sum(t => t.FuelCost);
        var profit = revenue - cost;

        s13Totals = new Step13Totals
        {
            TotalMiles = totalMiles,
            Revenue = revenue,
            Cost = cost,
            Profit = profit
        };

        // Per-driver rows
        s13DriverSummaries = s12Trips
        .GroupBy(t => t.Driver)
        .Select(g => new Step13DriverSummary
        {
            Driver = g.Key,
            Revenue = g.Sum(t => t.Miles * s13CustomerRatePerMile),
            Cost = g.Sum(ComputeS12Pay) + g.Sum(t => t.FuelCost)
        })
        .Select(r => new Step13DriverSummary
        {
            Driver = r.Driver,
            Revenue = r.Revenue,
            Cost = r.Cost,
            Profit = r.Revenue - r.Cost
        })
        .OrderByDescending(r => r.Profit)
        .ToList();

        s13MaxProfit = s13DriverSummaries.Any() ? s13DriverSummaries.Max(r => r.Profit) : 0m;
    }

    // ===== Inline Demo: Step 11 (Assignment Validator) =====
    // Lightweight demo types (local to Guide)
    private enum G11LicenseLevel { ClassC = 1, ClassB = 2, ClassA = 3 }
    private enum G11TruckClass { Light, Medium, Heavy }
    private enum G11RouteType { Local, LongHaul, Hazmat, Oversized }

    private class G11Driver
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public G11LicenseLevel LicenseLevel { get; set; } = G11LicenseLevel.ClassC;
        public int YearsOfExperience { get; set; }
        public bool IsAvailable { get; set; } = true;
    }

    private class G11Truck
    {
        public int Id { get; set; }
        public string DisplayName { get; set; } = string.Empty;
        public G11TruckClass Class { get; set; } = G11TruckClass.Light;
        public bool IsAvailable { get; set; } = true;
        public bool InMaintenance { get; set; } = false;
    }

    // Demo state
    private List<G11Driver> g11Drivers = new();
    private List<G11Truck> g11Trucks = new();
    private List<G11RouteType> g11RouteTypes = Enum.GetValues<G11RouteType>().ToList();
    private int? g11SelectedDriverId;
    private int? g11SelectedTruckId;
    private G11RouteType? g11SelectedRouteType = null;
    private bool g11IsValid;
    private List<string> g11Warnings = new();

    private void EnsureG11Seeded()
    {
        if (g11Drivers.Count == 0)
        {
            g11Drivers = new()
            {
                new G11Driver { Id = 1, Name = "Alex", LicenseLevel = G11LicenseLevel.ClassA, YearsOfExperience = 5, IsAvailable = true },
                new G11Driver { Id = 2, Name = "Sam",  LicenseLevel = G11LicenseLevel.ClassB, YearsOfExperience = 2, IsAvailable = true },
                new G11Driver { Id = 3, Name = "Riley",LicenseLevel = G11LicenseLevel.ClassC, YearsOfExperience = 1, IsAvailable = true },
            };
        }
        if (g11Trucks.Count == 0)
        {
            g11Trucks = new()
            {
                new G11Truck { Id = 1, DisplayName = "Freightliner FL-01", Class = G11TruckClass.Heavy,  IsAvailable = true,  InMaintenance = false },
                new G11Truck { Id = 2, DisplayName = "Volvo VNL-22",     Class = G11TruckClass.Medium, IsAvailable = true,  InMaintenance = false },
                new G11Truck { Id = 3, DisplayName = "Ford F-150",       Class = G11TruckClass.Light,  IsAvailable = true,  InMaintenance = false },
            };
        }
    }

    private void OnG11DriverChanged(ChangeEventArgs e)
    {
        EnsureG11Seeded();
        g11SelectedDriverId = int.TryParse(Convert.ToString(e.Value), out var id) ? id : null;
        ValidateG11();
    }

    private void OnG11TruckChanged(ChangeEventArgs e)
    {
        EnsureG11Seeded();
        g11SelectedTruckId = int.TryParse(Convert.ToString(e.Value), out var id) ? id : null;
        ValidateG11();
    }

    private void OnG11RouteTypeChanged(ChangeEventArgs e)
    {
        var val = Convert.ToString(e.Value);
        if (string.IsNullOrWhiteSpace(val))
        {
            g11SelectedRouteType = null;
            ValidateG11();
            return;
        }
        if (Enum.TryParse<G11RouteType>(val, out var rt))
        {
            g11SelectedRouteType = rt;
            ValidateG11();
        }
    }

    private void ResetG11Demo()
    {
        g11SelectedDriverId = null;
        g11SelectedTruckId = null;
        g11SelectedRouteType = null;
        g11Warnings.Clear();
        g11IsValid = false;
    }

    private void ValidateG11()
    {
        EnsureG11Seeded();
        g11Warnings.Clear();
        g11IsValid = true;

        var driver = g11SelectedDriverId.HasValue ? g11Drivers.FirstOrDefault(d => d.Id == g11SelectedDriverId.Value) : null;
        var truck  = g11SelectedTruckId.HasValue  ? g11Trucks.FirstOrDefault(t => t.Id == g11SelectedTruckId.Value) : null;

        if (driver is null || truck is null)
        {
            g11IsValid = false;
            return;
        }

        if (!driver.IsAvailable)
        {
            g11Warnings.Add($"❌ Driver {driver.Name} is not available");
            g11IsValid = false;
        }

        if (!truck.IsAvailable || truck.InMaintenance)
        {
            g11Warnings.Add($"❌ Truck {truck.DisplayName} is not available (maintenance)");
            g11IsValid = false;
        }

        // License vs Truck class
        bool licenseOk = truck.Class switch
        {
            G11TruckClass.Heavy  => driver.LicenseLevel == G11LicenseLevel.ClassA,
            G11TruckClass.Medium => driver.LicenseLevel >= G11LicenseLevel.ClassB,
            _ => true
        };
        if (!licenseOk)
        {
            g11Warnings.Add($"❌ {driver.Name} has {driver.LicenseLevel}, but {truck.DisplayName} requires higher license");
            g11IsValid = false;
        }

        // Route type required
        if (g11SelectedRouteType is null)
        {
            g11Warnings.Add("⚠️ Please select a route type");
            g11IsValid = false;
            return;
        }

        // Experience vs Route type
        var routeType = g11SelectedRouteType.Value;
        bool hasExperience = routeType switch
        {
            G11RouteType.Hazmat    => driver.YearsOfExperience >= 2,
            G11RouteType.Oversized => driver.YearsOfExperience >= 3,
            G11RouteType.LongHaul  => driver.YearsOfExperience >= 1,
            _ => true
        };
        if (!hasExperience)
        {
            g11Warnings.Add($"⚠️ {driver.Name} has {driver.YearsOfExperience} years; {routeType} routes need more experience");
            g11IsValid = false;
        }

        if (g11IsValid && !g11Warnings.Any())
        {
            g11Warnings.Add("✅ Assignment is valid and ready!");
        }
    }

    // Local demo types
    public class DemoTrip
    {
        public string Driver { get; set; } = string.Empty;
        public int Miles { get; set; }
        public decimal RatePerMile { get; set; }
        public decimal PerDiem { get; set; }
        public decimal OvertimeHours { get; set; }
        public decimal OvertimeRatePerHour { get; set; }
        public decimal FuelCost { get; set; }
    }

    public class Step12Totals
    {
        public int TotalMiles { get; set; }
        public decimal TotalPay { get; set; }
        public decimal TotalExpenses { get; set; }
    }

    public class Step12DriverSummary
    {
        public string Driver { get; set; } = string.Empty;
        public decimal Pay { get; set; }
        public decimal Expenses { get; set; }
    }

    public class Step13Totals
    {
        public int TotalMiles { get; set; }
        public decimal Revenue { get; set; }
        public decimal Cost { get; set; }
        public decimal Profit { get; set; }
    }

    public class Step13DriverSummary
    {
        public string Driver { get; set; } = string.Empty;
        public decimal Revenue { get; set; }
        public decimal Cost { get; set; }
        public decimal Profit { get; set; }
    }

    // ===== Inline Demo: Step 10 (State Management) =====
    [Inject] private AppState AppState { get; set; } = default!;
    [Inject] private IDbContextFactory<BlazorMock.Data.AppDbContext> DbFactory { get; set; } = default!;
    private List<Driver> g10Drivers = new();
    private Driver? g10Selected => AppState.SelectedDriver;
    private async Task LoadG10DriversAsync()
    {
        try
        {
            await using var db = await DbFactory.CreateDbContextAsync();
            g10Drivers = await db.Drivers.OrderBy(d => d.Name).ToListAsync();
        }
        catch { g10Drivers = new(); }
    }

    private void OnG10PickDriver(ChangeEventArgs e)
    {
        if (int.TryParse(Convert.ToString(e.Value), out var id))
        {
            AppState.SelectDriver(g10Drivers.First(d => d.Id == id));
        }
        else
        {
            AppState.ClearSelection();
        }
        StateHasChanged();
    }
    private void ClearG10Selection()
    {
        AppState.ClearSelection();
        StateHasChanged();
    }
}