@page "/examples/step5"
@inject ILearningProgressService ProgressService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@implements IDisposable
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using BlazorMock.Models

<PageTitle>Step 5: Forms & Validation - Example</PageTitle>

<div class="min-h-screen py-8 rounded-4xl bg-gray-50">
    <div class="w-full mx-auto px-4 max-w-5xl">
        <!-- Header -->
        <div class="mb-8">
            <a href="/guide"
                class="inline-flex items-center gap-2 text-sm sm:text-base text-blue-600 hover:text-blue-700 mb-4">
                <span>‚Üê</span> Back to Guide
            </a>
            <h1 class="text-4xl font-bold text-gray-900 mb-4">
                üéØ Step 5: Forms & Validation
            </h1>
            <p class="text-xl text-gray-600">
                Create forms with validation using EditForm, DataAnnotationsValidator, and validation attributes to
                ensure data quality.
            </p>
        </div>

        <!-- What You'll Learn -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">üìò What You'll Learn</h2>
            <p class="text-gray-700 mb-6">Blazor provides powerful form handling with built-in validation. Use EditForm
                component with data annotations for robust form validation.</p>

            <h3 class="text-lg font-semibold text-gray-700 mb-2">üß© Code Example: EditForm with Validation</h3>
            <p class="text-sm sm:text-base text-gray-600 mb-2">
                A minimal form with validation using data annotations and Blazor input components.
            </p>
            <ul class="list-disc pl-5 text-sm sm:text-base text-gray-700 space-y-1 mb-4">
                <li>
                    <code class="px-1 rounded bg-gray-100">EditForm</code> binds a model and handles
                    <code class="px-1 rounded bg-gray-100">OnValidSubmit</code>
                </li>
                <li>
                    <code class="px-1 rounded bg-gray-100">DataAnnotationsValidator</code> +
                    <code class="px-1 rounded bg-gray-100">ValidationSummary</code> enable built-in messages
                </li>
                <li>
                    Field components use two-way binding via <code
                        class="px-1 rounded bg-gray-100">&#64;bind-Value</code>
                </li>
                <li>
                    Per-field errors shown with <code class="px-1 rounded bg-gray-100">ValidationMessage</code>
                </li>
            </ul>

            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto break-all mb-4">
                <pre data-code-title="Razor + C# (EditForm)">
&lt;div class=&quot;min-h-screen py-8 bg-gray-50&quot;&gt;
    &lt;div class=&quot;max-w-5xl mx-auto px-4&quot;&gt;
        &lt;h1 class=&quot;text-3xl font-bold text-gray-900 mb-6&quot;&gt;Driver Registration&lt;/h1&gt;
        
        &lt;div class=&quot;bg-white rounded-xl p-6 border border-gray-200&quot;&gt;
            &lt;EditForm Model=&quot;driver&quot; OnValidSubmit=&quot;HandleValidSubmit&quot;&gt;
                &lt;DataAnnotationsValidator /&gt;
                
                &lt;div class=&quot;mb-4&quot;&gt;
                    &lt;ValidationSummary class=&quot;text-sm text-red-600 bg-red-50 border border-red-200 rounded-lg p-3&quot; /&gt;
                &lt;/div&gt;

                &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 gap-4 mb-4&quot;&gt;
                    &lt;div&gt;
                        &lt;label class=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;
                            Name &lt;span class=&quot;text-red-500&quot;&gt;*&lt;/span&gt;
                        &lt;/label&gt;
                        &lt;InputText &#64;bind-Value=&quot;driver.Name&quot;
                                   class=&quot;w-full rounded-lg border border-gray-300 p-3 text-sm focus:ring-2 focus:ring-orange-500 focus:border-orange-500 bg-white&quot;
                                   placeholder=&quot;Enter driver name&quot; /&gt;
                        &lt;ValidationMessage For=&quot;() =&gt; driver.Name&quot; class=&quot;text-xs text-red-600 mt-1 block&quot; /&gt;
                    &lt;/div&gt;

                    &lt;div&gt;
                        &lt;label class=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;
                            Email &lt;span class=&quot;text-red-500&quot;&gt;*&lt;/span&gt;
                        &lt;/label&gt;
                        &lt;InputText type=&quot;email&quot; &#64;bind-Value=&quot;driver.Email&quot;
                                   class=&quot;w-full rounded-lg border border-gray-300 p-3 text-sm focus:ring-2 focus:ring-orange-500 focus:border-orange-500 bg-white&quot;
                                   placeholder=&quot;driver@example.com&quot; /&gt;
                        &lt;ValidationMessage For=&quot;() =&gt; driver.Email&quot; class=&quot;text-xs text-red-600 mt-1 block&quot; /&gt;
                    &lt;/div&gt;
                &lt;/div&gt;

                &lt;div class=&quot;flex gap-3&quot;&gt;
                    &lt;button type=&quot;submit&quot;
                            class=&quot;px-6 py-3 bg-orange-600 hover:bg-orange-700 text-white rounded-lg font-medium transition-colors&quot;&gt;
                        Submit Driver
                    &lt;/button&gt;
                    &lt;button type=&quot;button&quot; &#64;onclick=&quot;ResetForm&quot;
                            class=&quot;px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors&quot;&gt;
                        Reset Form
                    &lt;/button&gt;
                &lt;/div&gt;
            &lt;/EditForm&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&#64;code {
    private Driver driver = new();

    private void HandleValidSubmit()
    {
        // Process valid form data
        // e.g., save to database, show success message
    }
    
    private void ResetForm()
    {
        driver = new Driver();
    }
}

public class Driver
{
    [Required(ErrorMessage = "Name is required")]
    [StringLength(50)]
    public string Name { get; set; } = string.Empty;

    [EmailAddress]
    public string Email { get; set; } = string.Empty;
}
                                </pre>
            </div>

            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                <p class="text-sm text-blue-800 font-semibold mb-2">üí° Key Components:</p>
                <ul class="text-sm text-blue-700 list-disc ml-5 space-y-1">
                    <li><code>EditForm</code> ‚Üí Blazor's form component with automatic validation</li>
                    <li><code>DataAnnotationsValidator</code> ‚Üí Enables validation attributes on model</li>
                    <li><code>ValidationSummary</code> ‚Üí Shows all validation errors in one place</li>
                    <li><code>ValidationMessage</code> ‚Üí Displays errors for specific fields</li>
                    <li><code>OnValidSubmit</code> ‚Üí Event fired only when form data is valid</li>
                    <li><code>InputText</code>, <code>InputNumber</code>, <code>InputSelect</code> ‚Üí Blazor input
                        components</li>
                </ul>
            </div>

            <div class="mt-6 pt-6 border-t border-gray-200">
                <p class="text-sm text-gray-600 mb-3"><strong>üí° Key Concepts:</strong> EditForm,
                    DataAnnotationsValidator, Input Components, Validation Attributes, Two-Way Binding</p>
                <div class="flex flex-wrap items-center gap-2">
                    <span class="text-sm text-gray-600">‚Üí Related tips:</span>
                    <a href="/tips#editform--validation"
                        class="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-xs font-medium hover:bg-blue-200 transition-colors">EditForm</a>
                    <a href="/tips#validation-attributes"
                        class="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-xs font-medium hover:bg-blue-200 transition-colors">Validation</a>
                </div>
            </div>
        </div>

        <!-- Interactive Demo -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">üöó Interactive Demo: Driver Registration Form</h2>
            <p class="text-gray-700 mb-6">Try submitting the form with invalid data to see validation in action. All
                fields have specific requirements.</p>

            <div class="bg-gray-50 border border-gray-200 rounded-lg p-6">
                <EditForm Model="driver" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />

                    @* Show validation summary at the top *@
                    <div class="mb-4">
                        <ValidationSummary
                            class="text-sm text-red-600 bg-red-50 border border-red-200 rounded-lg p-3" />
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <!-- First Name -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                First Name <span class="text-red-500">*</span>
                            </label>
                            <InputText @bind-Value="driver.FirstName"
                                class="w-full rounded-lg border border-gray-300 p-3 text-sm focus:ring-2 focus:ring-orange-500 focus:border-orange-500 bg-white"
                                placeholder="Enter first name" />
                            <ValidationMessage For="() => driver.FirstName" class="text-xs text-red-600 mt-1 block" />
                        </div>

                        <!-- Last Name -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Last Name <span class="text-red-500">*</span>
                            </label>
                            <InputText @bind-Value="driver.LastName"
                                class="w-full rounded-lg border border-gray-300 p-3 text-sm focus:ring-2 focus:ring-orange-500 focus:border-orange-500 bg-white"
                                placeholder="Enter last name" />
                            <ValidationMessage For="() => driver.LastName" class="text-xs text-red-600 mt-1 block" />
                        </div>

                        <!-- Email -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Email <span class="text-red-500">*</span>
                            </label>
                            <InputText type="email" @bind-Value="driver.Email"
                                class="w-full rounded-lg border border-gray-300 p-3 text-sm focus:ring-2 focus:ring-orange-500 focus:border-orange-500 bg-white"
                                placeholder="driver@example.com" />
                            <ValidationMessage For="() => driver.Email" class="text-xs text-red-600 mt-1 block" />
                        </div>

                        <!-- CDL Number -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                CDL Number <span class="text-red-500">*</span>
                            </label>
                            <InputText @bind-Value="driver.CdlNumber"
                                class="w-full rounded-lg border border-gray-300 p-3 text-sm focus:ring-2 focus:ring-orange-500 focus:border-orange-500 bg-white"
                                placeholder="e.g., CDL123456" />
                            <ValidationMessage For="() => driver.CdlNumber" class="text-xs text-red-600 mt-1 block" />
                            <p class="text-xs text-gray-500 mt-1">Must be 4-20 characters</p>
                        </div>

                        <!-- Years Experience -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Years of Experience <span class="text-red-500">*</span>
                            </label>
                            <InputNumber @bind-Value="driver.YearsExperience"
                                class="w-full rounded-lg border border-gray-300 p-3 text-sm focus:ring-2 focus:ring-orange-500 focus:border-orange-500 bg-white"
                                placeholder="0" />
                            <ValidationMessage For="() => driver.YearsExperience"
                                class="text-xs text-red-600 mt-1 block" />
                            <p class="text-xs text-gray-500 mt-1">Must be between 0 and 60</p>
                        </div>

                        <!-- License Level (Enum) -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                License Level <span class="text-red-500">*</span>
                            </label>
                            <InputSelect @bind-Value="driver.LicenseLevel"
                                class="w-full rounded-lg border border-gray-300 p-3 text-sm focus:ring-2 focus:ring-orange-500 focus:border-orange-500 bg-white">
                                <option value="">-- Select License Level --</option>
                                @foreach (var level in Enum.GetValues<LicenseLevel>())
                                {
                                    <option value="@level">@GetLicenseDisplay(level)</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => driver.LicenseLevel"
                                class="text-xs text-red-600 mt-1 block" />
                        </div>
                    </div>

                    <!-- Additional Certifications -->
                    <div class="mb-4">
                        <label class="flex items-center gap-2 cursor-pointer">
                            <InputCheckbox @bind-Value="driver.HasHazmatEndorsement"
                                class="w-4 h-4 text-orange-600 rounded focus:ring-orange-500" />
                            <span class="text-sm text-gray-700">Hazmat Endorsement</span>
                        </label>
                    </div>

                    <!-- Buttons -->
                    <div class="flex flex-wrap gap-3">
                        <button type="submit"
                            class="px-6 py-3 bg-orange-600 hover:bg-orange-700 text-white rounded-lg font-medium transition-colors">
                            üöó Submit Driver Registration
                        </button>
                        <button type="button" @onclick="ResetForm"
                            class="px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                            Reset Form
                        </button>
                    </div>
                </EditForm>

                @if (submitted)
                {
                    <div class="mt-6 bg-green-50 border border-green-200 rounded-lg p-4">
                        <div class="flex items-start gap-3">
                            <span class="text-2xl">‚úÖ</span>
                            <div class="flex-1">
                                <h4 class="text-lg font-semibold text-green-800 mb-2">Driver Registered Successfully!</h4>
                                <div class="text-sm text-green-700 space-y-1">
                                    <p><strong>Name:</strong> @driver.FirstName @driver.LastName</p>
                                    <p><strong>Email:</strong> @driver.Email</p>
                                    <p><strong>CDL Number:</strong> @driver.CdlNumber</p>
                                    <p><strong>License Level:</strong> @(driver.LicenseLevel is null ? "" :
                                                                            GetLicenseDisplay(driver.LicenseLevel.Value))</p>
                                    <p><strong>Years Experience:</strong> @driver.YearsExperience years</p>
                                    <p><strong>Hazmat Certified:</strong> @(driver.HasHazmatEndorsement ? "Yes ‚ò¢Ô∏è" : "No")
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- How to do it -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">üõ†Ô∏è How to do it</h2>
            <ol class="list-decimal ml-5 space-y-2 text-gray-700">
                <li>Create or open a page (e.g., <code>Components/Pages/Examples/Step5Playground.razor</code>).</li>
                <li>Add the <code>&lt;EditForm&gt;</code> markup from the ‚ÄúRazor + C# (EditForm)‚Äù block and the C# code under <code>&#64;code</code>.</li>
                <li>Ensure your model class (e.g., <code>Driver</code>) includes data annotation attributes like <code>[Required]</code> and <code>[EmailAddress]</code>.</li>
                <li>Build and run, then navigate to the page to test validation behavior.</li>
            </ol>
            <div class="mt-4 bg-blue-50 border border-blue-200 rounded-lg p-3 text-sm text-blue-800">
                Tip: Show a <code>&lt;ValidationSummary /&gt;</code> for page-level errors and <code>&lt;ValidationMessage /&gt;</code> for field-level messages.
            </div>
        </div>

        <!-- Validation Attributes Reference -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">üîß Common Validation Attributes</h2>
            <p class="text-gray-700 mb-4">Blazor supports all standard .NET data annotation attributes for validation:
            </p>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
                    <h3 class="font-semibold text-gray-800 mb-2">[Required]</h3>
                    <p class="text-sm text-gray-600 mb-2">Ensures field has a value</p>
                    <pre data-code-title="Attribute"
                        class="bg-gray-100 p-2 rounded text-xs font-mono text-gray-800">[Required(ErrorMessage = "Name required")]</pre>
                </div>

                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
                    <h3 class="font-semibold text-gray-800 mb-2">[StringLength]</h3>
                    <p class="text-sm text-gray-600 mb-2">Limits string length</p>
                    <pre data-code-title="Attribute"
                        class="bg-gray-100 p-2 rounded text-xs font-mono text-gray-800">[StringLength(50, MinimumLength = 2)]</pre>
                </div>

                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
                    <h3 class="font-semibold text-gray-800 mb-2">[EmailAddress]</h3>
                    <p class="text-sm text-gray-600 mb-2">Validates email format</p>
                    <pre data-code-title="Attribute"
                        class="bg-gray-100 p-2 rounded text-xs font-mono text-gray-800">[EmailAddress]</pre>
                </div>

                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
                    <h3 class="font-semibold text-gray-800 mb-2">[Range]</h3>
                    <p class="text-sm text-gray-600 mb-2">Sets numeric range</p>
                    <pre data-code-title="Attribute"
                        class="bg-gray-100 p-2 rounded text-xs font-mono text-gray-800">[Range(0, 60)]</pre>
                </div>

                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
                    <h3 class="font-semibold text-gray-800 mb-2">[RegularExpression]</h3>
                    <p class="text-sm text-gray-600 mb-2">Custom pattern matching</p>
                    <pre data-code-title="Attribute"
                        class="bg-gray-100 p-2 rounded text-xs font-mono text-gray-800">[RegularExpression(@@"^\d{{3}}-\d{{2}}-\d{{4}}$")]</pre>
                </div>

                <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
                    <h3 class="font-semibold text-gray-800 mb-2">[Compare]</h3>
                    <p class="text-sm text-gray-600 mb-2">Compares two properties</p>
                    <pre data-code-title="Attribute"
                        class="bg-gray-100 p-2 rounded text-xs font-mono text-gray-800">[Compare(nameof(Password))]</pre>
                </div>
            </div>
        </div>

        <!-- Tips Section -->
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
            <h3 class="text-lg font-semibold text-blue-800 mb-3">üí° Pro Tips</h3>
            <ul class="space-y-2 text-sm text-blue-700">
                <li class="flex items-start gap-2">
                    <span class="text-blue-600 font-bold">‚Ä¢</span>
                    <span><strong>OnValidSubmit vs OnSubmit:</strong> Use <code
                            class="bg-blue-100 px-1 rounded">OnValidSubmit</code> to only handle valid forms, or <code
                            class="bg-blue-100 px-1 rounded">OnSubmit</code> to handle all submissions.</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-blue-600 font-bold">‚Ä¢</span>
                    <span><strong>ValidationSummary:</strong> Shows all validation errors in one place at the top of the
                        form.</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-blue-600 font-bold">‚Ä¢</span>
                    <span><strong>ValidationMessage:</strong> Shows errors for specific fields. Use <code
                            class="bg-blue-100 px-1 rounded">For="() => model.Property"</code> syntax.</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-blue-600 font-bold">‚Ä¢</span>
                    <span><strong>Input Components:</strong> Use <code
                            class="bg-blue-100 px-1 rounded">InputText</code>, <code
                            class="bg-blue-100 px-1 rounded">InputNumber</code>, <code
                            class="bg-blue-100 px-1 rounded">InputSelect</code>, <code
                            class="bg-blue-100 px-1 rounded">InputCheckbox</code>, etc. for automatic validation.</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-blue-600 font-bold">‚Ä¢</span>
                    <span><strong>Custom Validation:</strong> Create custom validation attributes by inheriting from
                        <code class="bg-blue-100 px-1 rounded">ValidationAttribute</code>.</span>
                </li>
            </ul>
        </div>

        <!-- Mark Complete Section -->
        <div class="bg-white rounded-xl p-6 border-2 border-green-200 mb-6">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                <div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-1">Ready to move on?</h3>
                    <p class="text-sm text-gray-600">Mark this step as complete to track your progress.</p>
                </div>
                @if (isComplete)
                {
                    <div class="flex items-center gap-3">
                        <span class="px-4 py-2 rounded-full bg-green-100 text-green-700 font-medium">‚úì Completed</span>
                        <button @onclick="ResetStep"
                            class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm">Reset</button>
                    </div>
                }
                else
                {
                    <button @onclick="MarkComplete"
                        class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors">
                        Mark as Complete
                    </button>
                }
            </div>
        </div>

        <!-- Navigation -->
        <div class="flex items-center justify-between">
            <a href="/examples/step4"
                class="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                <span>‚Üê</span>
                Previous: Step 4
            </a>
            <a href="/examples/step6"
                class="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                Next: Step 6
                <span>‚Üí</span>
            </a>
        </div>
    </div>
</div>

@code {
    private bool isComplete;
    private bool submitted = false;
    private Driver driver = new();
    private IJSObjectReference? _copyModule;

    protected override async Task OnInitializedAsync()
    {
        var step = await ProgressService.GetStepAsync(5);
        isComplete = step?.IsComplete ?? false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _copyModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/codeblocks.js");
                await _copyModule.InvokeVoidAsync("enhancePreBlocks");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to load code block enhancer: {ex.Message}");
            }
        }
    }

    private async Task MarkComplete()
    {
        await ProgressService.MarkStepCompleteAsync(5);
        isComplete = true;
    }

    private async Task ResetStep()
    {
        await ProgressService.MarkStepIncompleteAsync(5);
        isComplete = false;
    }

    private void HandleValidSubmit()
    {
        submitted = true;
    }

    private void ResetForm()
    {
        driver = new();
        submitted = false;
    }

    public void Dispose()
    {
        _copyModule?.DisposeAsync();
    }

    public class Driver
    {
        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, ErrorMessage = "First name must be less than 50 characters")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, ErrorMessage = "Last name must be less than 50 characters")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "CDL number is required")]
        [StringLength(20, MinimumLength = 4, ErrorMessage = "CDL number must be between 4 and 20 characters")]
        public string CdlNumber { get; set; } = string.Empty;

        [Required(ErrorMessage = "Years of experience is required")]
        [Range(0, 60, ErrorMessage = "Years of experience must be between 0 and 60")]
        public int? YearsExperience { get; set; }

        [Required(ErrorMessage = "License level is required")]
        public LicenseLevel? LicenseLevel { get; set; }

        public bool HasHazmatEndorsement { get; set; }
    }

    private static string GetLicenseDisplay(LicenseLevel level)
    {
        // Use DisplayAttribute when available; fallback to enum name
        var member = typeof(LicenseLevel).GetMember(level.ToString()).FirstOrDefault();
        if (member is not null)
        {
            var displayAttr = (DisplayAttribute?)Attribute.GetCustomAttribute(member, typeof(DisplayAttribute));
            if (displayAttr?.Name is string name && !string.IsNullOrWhiteSpace(name))
            {
                return name;
            }
        }
        return level.ToString();
    }
}