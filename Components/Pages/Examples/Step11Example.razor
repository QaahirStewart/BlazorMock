@page "/examples/step11"
@inject ILearningProgressService ProgressService
@inject IJSRuntime JS
@implements IAsyncDisposable
@rendermode InteractiveServer

<div class="min-h-screen py-8 rounded-4xl bg-gray-50">
    <div class="w-full mx-auto px-4 max-w-5xl">
        <div class="mb-8">
            <a href="/guide" class="inline-flex items-center gap-2 text-blue-600 hover:text-blue-700 mb-4">
                <span>‚Üê</span> Back to Guide
            </a>
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-4">
                <div class="min-w-0 flex-1">
                    <h1 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-2 break-words">üéØ Step 11: Assignment
                        Logic & Business Rules</h1>
                    <p class="text-base sm:text-lg md:text-xl text-gray-600 leading-relaxed break-words">Implement
                        business rules and validation for driver-truck-route assignments.</p>
                </div>

            </div>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üéØ Learning Objectives
            </h2>
            <ul class="space-y-2 text-sm sm:text-base lg:text-lg text-gray-700">
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Validate driver license levels match truck requirements</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Check driver experience for route types</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Verify availability status before assignment</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Display validation errors to users</span>
                </li>
            </ul>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üèóÔ∏è Assignment Form Component
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                Build a form to create driver‚Äìtruck‚Äìroute assignments and surface validation messages as the user
                selects options.
            </p>
            <ul class="list-disc ml-5 text-xs sm:text-sm text-gray-700 mb-4 space-y-1">
                <li>Uses EditForm + DataAnnotations for built-in validation plumbing</li>
                <li>Driver and Truck selects only include currently available options</li>
                <li>Route Type has a placeholder and must be selected before submit</li>
                <li>Change handlers trigger instant validation feedback</li>
                <li>Submit stays disabled until hard rules pass</li>
            </ul>

            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto mb-4">
                <details class="group">
                    <summary
                        class="inline-flex items-center gap-2 px-3 py-1.5 rounded border border-gray-300 bg-white text-xs sm:text-sm cursor-pointer select-none">
                        Show code
                        <span class="text-gray-500 group-open:hidden">(click to expand)</span>
                        <span class="text-gray-500 hidden group-open:inline">(click to collapse)</span>
                    </summary>
                    <div class="relative mt-3">
                        <button
                            class="absolute top-2 right-2 px-3 py-1.5 rounded border border-gray-300 bg-white hover:bg-gray-50 text-xs sm:text-sm"
                            @onclick="CopyFormCode">Copy</button>
                        <pre id="s11-code-form" data-code-title="Razor + C# (Assignment Form)"
                            class="text-xs sm:text-sm text-gray-800 font-mono"><code>@@page "/assignments/create"
@@inject AppDbContext DbContext
@@inject NavigationManager Navigation
@@using Microsoft.EntityFrameworkCore

&lt;h1&gt;Create New Assignment&lt;/h1&gt;

@@if (errorMessage != null)
{
    &lt;div class="alert alert-danger"&gt;
        @@errorMessage
    &lt;/div&gt;
}

&lt;EditForm Model="newRoute" OnValidSubmit="HandleValidSubmit"&gt;
    &lt;DataAnnotationsValidator /&gt;

    &lt;div class="form-group"&gt;
        &lt;label&gt;Route Number:&lt;/label&gt;
        &lt;InputText @@bind-Value="newRoute.RouteNumber" /&gt;
    &lt;/div&gt;

    &lt;div class="form-group"&gt;
        &lt;label&gt;Select Driver:&lt;/label&gt;
        &lt;InputSelect @@bind-Value="newRoute.DriverId" @@bind-Value:after="OnDriverChanged"&gt;
            &lt;option value="0"&gt;-- Select Driver --&lt;/option&gt;
            @@foreach (var driver in availableDrivers)
            {
                &lt;option value="@@driver.Id"&gt;
                    @@driver.Name (@@driver.LicenseLevel, @@driver.YearsOfExperience yrs)
                &lt;/option&gt;
            }
        &lt;/InputSelect&gt;
    &lt;/div&gt;

    &lt;div class="form-group"&gt;
        &lt;label&gt;Select Truck:&lt;/label&gt;
        &lt;InputSelect @@bind-Value="newRoute.TruckId" @@bind-Value:after="ValidateAssignment"&gt;
            &lt;option value="0"&gt;-- Select Truck --&lt;/option&gt;
            @@foreach (var truck in availableTrucks)
            {
                &lt;option value="@@truck.Id"&gt;
                    @@truck.GetDisplayName() (@@truck.Class)
                &lt;/option&gt;
            }
        &lt;/InputSelect&gt;
    &lt;/div&gt;

    &lt;div class="form-group"&gt;
        &lt;label&gt;Route Type:&lt;/label&gt;
        &lt;InputSelect @@bind-Value="newRoute.Type" @@bind-Value:after="ValidateAssignment"&gt;
            &lt;option value=""&gt;-- Select Route Type --&lt;/option&gt;
            @@foreach (var type in Enum.GetValues&lt;RouteType&gt;())
            {
                &lt;option value="@@type"&gt;@@type&lt;/option&gt;
            }
        &lt;/InputSelect&gt;
    &lt;/div&gt;

    @@* Show validation warnings *@@
    @@if (validationWarnings.Any())
    {
        &lt;div class="alert alert-warning"&gt;
            &lt;h4&gt;Validation Warnings:&lt;/h4&gt;
            &lt;ul&gt;
                @@foreach (var warning in validationWarnings)
                {
                    &lt;li&gt;@@warning&lt;/li&gt;
                }
            &lt;/ul&gt;
        &lt;/div&gt;
    }

    &lt;button type="submit" disabled="@@(!isValid)"&gt;Create Assignment&lt;/button&gt;
    &lt;a href="/routes"&gt;Cancel&lt;/a&gt;
&lt;/EditForm&gt;</code></pre>
                    </div>
                </details>
            </div>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                ‚úÖ Validation Logic
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                Apply business rules: license level vs. truck, experience vs. route type, and maintenance flags.
                Disable submit when rules fail; show warnings when applicable.
            </p>
            <ul class="list-disc ml-5 text-xs sm:text-sm text-gray-700 mb-4 space-y-1">
                <li>Tracks selected Driver, Truck, and Route Type plus validity</li>
                <li>Hard rule: license must meet the selected truck‚Äôs required class</li>
                <li>Hard rule: Route Type is required; experience checked per type</li>
                <li>Soft rule: upcoming maintenance is a warning, not a blocker</li>
                <li>Aggregates friendly messages; toggles isValid accordingly</li>
            </ul>

            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto mb-4">
                <details class="group">
                    <summary
                        class="inline-flex items-center gap-2 px-3 py-1.5 rounded border border-gray-300 bg-white text-xs sm:text-sm cursor-pointer select-none">
                        Show code
                        <span class="text-gray-500 group-open:hidden">(click to expand)</span>
                        <span class="text-gray-500 hidden group-open:inline">(click to collapse)</span>
                    </summary>
                    <div class="relative mt-3">
                        <button
                            class="absolute top-2 right-2 px-3 py-1.5 rounded border border-gray-300 bg-white hover:bg-gray-50 text-xs sm:text-sm"
                            @onclick="CopyValidationCode">Copy</button>
                        <pre id="s11-code-validation" data-code-title="C# (Validation Logic)"
                            class="text-xs sm:text-sm text-gray-800 font-mono"><code>@@code {
    private Route newRoute = new();
    private List&lt;Driver&gt; availableDrivers = new();
    private List&lt;Truck&gt; availableTrucks = new();
    private List&lt;string&gt; validationWarnings = new();
    private string? errorMessage;
    private bool isValid = false;

    protected override async Task OnInitializedAsync()
    {
        // Load only available drivers and trucks
        availableDrivers = await DbContext.Drivers
            .Where(d =&gt; d.IsAvailable)
            .ToListAsync();

        availableTrucks = await DbContext.Trucks
            .Where(t =&gt; t.IsAvailable && !t.InMaintenance)
            .ToListAsync();
    }

    private void OnDriverChanged()
    {
        ValidateAssignment();
    }

    private void ValidateAssignment()
    {
        validationWarnings.Clear();
        isValid = true;

        if (newRoute.DriverId == 0 || newRoute.TruckId == 0)
        {
            isValid = false;
            return;
        }

        var driver = availableDrivers.FirstOrDefault(d =&gt; d.Id == newRoute.DriverId);
        var truck = availableTrucks.FirstOrDefault(t =&gt; t.Id == newRoute.TruckId);

        if (driver == null || truck == null) return;

        // Rule 1: Check license level matches truck class
        if (!truck.CanBeOperatedBy(driver))
        {
            validationWarnings.Add(
                $"‚ùå {driver.Name} has {driver.LicenseLevel} license, " +
                $"but this truck requires {truck.GetRequiredLicenseLevel()}."
            );
            isValid = false;
        }

        // Route type required
        if (newRoute.Type is null)
        {
            validationWarnings.Add("‚ö†Ô∏è Please select a route type");
            isValid = false;
            return;
        }

        // Rule 2: Check experience for route type
        var rt = newRoute.Type.Value;
        bool hasExperience = rt switch
        {
            RouteType.Hazmat =&gt; driver.YearsOfExperience &gt;= 2,
            RouteType.Oversized =&gt; driver.YearsOfExperience &gt;= 3,
            RouteType.LongHaul =&gt; driver.YearsOfExperience &gt;= 1,
            _ =&gt; true
        };

        if (!hasExperience)
        {
            validationWarnings.Add(
                $"‚ö†Ô∏è {driver.Name} has {driver.YearsOfExperience} years experience. " +
                $"{rt} routes require more experience."
            );
            isValid = false;
        }

        // Rule 3: Check truck maintenance status
        if (truck.NeedsMaintenanceSoon())
        {
            validationWarnings.Add(
                $"‚ö†Ô∏è {truck.GetDisplayName()} needs maintenance soon " +
                $"(within {truck.NextMaintenanceMileage - truck.CurrentMileage} miles)."
            );
            // Warning only - still allow assignment
        }

        // Success message
        if (isValid && !validationWarnings.Any())
        {
            validationWarnings.Add("‚úÖ Assignment is valid and ready to create!");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!isValid)
        {
            errorMessage = "Cannot create assignment. Please fix validation errors.";
            return;
        }

        try
        {
            // Create the route assignment
            DbContext.Routes.Add(newRoute);
            await DbContext.SaveChangesAsync();

            // Mark driver and truck as unavailable
            var driver = await DbContext.Drivers.FindAsync(newRoute.DriverId);
            var truck = await DbContext.Trucks.FindAsync(newRoute.TruckId);

            if (driver != null) driver.IsAvailable = false;
            if (truck != null) truck.IsAvailable = false;

            await DbContext.SaveChangesAsync();

            Navigation.NavigateTo("/routes");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating assignment: {ex.Message}";
        }
    }
}</code></pre>
                    </div>
                </details>
            </div>

            <div class="bg-blue-50 border-l-4 border-blue-500 p-4">
                <p class="text-sm sm:text-base text-blue-800 break-words">
                    <strong>üí° Pro Tip:</strong> Use @@bind-Value:after to trigger validation immediately when the user
                    selects an option!
                </p>
            </div>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üé® Business Rules Summary
            </h2>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="bg-red-50 border-l-4 border-red-500 p-4 rounded-lg">
                    <h3 class="font-semibold text-red-900 mb-2 text-sm sm:text-base">‚ùå Hard Rules</h3>
                    <ul class="text-xs sm:text-sm text-red-800 space-y-1">
                        <li>‚úì License level must match truck class</li>
                        <li>‚úì Driver must have required experience</li>
                        <li>‚úì Driver must be available</li>
                        <li>‚úì Truck must be available</li>
                        <li>‚úì Truck must not be in maintenance</li>
                    </ul>
                </div>

                <div class="bg-yellow-50 border-l-4 border-yellow-500 p-4 rounded-lg">
                    <h3 class="font-semibold text-yellow-900 mb-2 text-sm sm:text-base">‚ö†Ô∏è Soft Warnings</h3>
                    <ul class="text-xs sm:text-sm text-yellow-800 space-y-1">
                        <li>‚úì Truck needs maintenance soon</li>
                        <li>‚úì Driver approaching max hours</li>
                        <li>‚úì Route is very long distance</li>
                        <li>‚úì Weather conditions</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Live Demo: Assignment Validator -->
        <div class="bg-black/3 rounded-2xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">üé¨ Live Demo: Assignment Validator</h2>

            <div class="bg-white rounded-xl p-4 border border-gray-200">
                <div class="grid sm:grid-cols-3 gap-3 mb-4">
                    <div>
                        <label class="block text-xs text-gray-600 mb-1">Route Type</label>
                        <select class="w-full rounded border border-gray-300 p-2 text-sm" value="@(demoSelectedRouteType?.ToString() ?? string.Empty)" @onchange="OnDemoRouteTypeChanged">
                            <option value="">-- Select Route Type --</option>
                            @foreach (var rt in demoRouteTypes)
                            {
                                <option value="@rt">@rt</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label class="block text-xs text-gray-600 mb-1">Truck</label>
                        <select class="w-full rounded border border-gray-300 p-2 text-sm" value="@demoSelectedTruckId" @onchange="OnDemoTruckChanged">
                            <option value="">-- Select Truck --</option>
                            @foreach (var t in demoTrucks)
                            {
                                <option value="@t.Id">@t.DisplayName (@t.Class)</option>
                            }
                        </select>
                    </div>  <div>
                        <label class="block text-xs text-gray-600 mb-1">Driver</label>
                        <select class="w-full rounded border border-gray-300 p-2 text-sm" value="@demoSelectedDriverId" @onchange="OnDemoDriverChanged">
                            <option value="">-- Select Driver --</option>
                            @foreach (var d in demoDrivers)
                            {
                                <option value="@d.Id">@d.Name (@d.LicenseLevel, @d.YearsOfExperience yrs)</option>
                            }
                        </select>
                    </div>
                  
                </div>

                @if (demoWarnings.Any())
                {
                    <div class="rounded border-l-4 border-yellow-500 bg-yellow-50 p-3 mb-3">
                        <div class="text-xs sm:text-sm text-yellow-800 font-semibold mb-1">Validation Warnings</div>
                        <ul class="text-xs sm:text-sm text-yellow-800 list-disc ml-5 space-y-1">
                            @foreach (var w in demoWarnings)
                            {
                                <li>@w</li>
                            }
                        </ul>
                    </div>
                }

                <div class="flex items-center justify-between">
                    <div class="text-xs sm:text-sm">
                        <span class="font-semibold">Status:</span>
                        @if (demoIsValid)
                        {
                            <span class="text-green-700">‚úÖ Valid assignment</span>
                        }
                        else
                        {
                            <span class="text-red-700">‚ùå Not valid</span>
                        }
                    </div>
                    <button class="px-3 py-1.5 rounded border border-gray-300 hover:bg-gray-50 text-xs sm:text-sm" @onclick="ResetDemo">Reset</button>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üîë Key Takeaways
            </h2>
            <ul class="space-y-3 text-sm sm:text-base lg:text-lg text-gray-700">
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Business rules protect data integrity</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Validate on both client and server side</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Use model methods for reusable validation logic</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Provide clear, user-friendly error messages</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Disable submit button when validation fails</span>
                </li>
            </ul>
        </div>

        <div class="bg-white rounded-xl p-6 border-2 border-green-200">
            <div class="flex flex-col sm:flex-row items-center justify-between gap-4">
                <div class="min-w-0 flex-1">
                    <h3 class="text-lg sm:text-xl font-bold text-gray-900 mb-2 break-words">Ready to move on?</h3>
                    <p class="text-sm sm:text-base text-gray-600 break-words">Mark this step as complete to track your
                        progress!</p>
                </div>
                @if (isComplete)
                {
                    <div class="flex items-center gap-3">
                        <span class="px-4 py-2 rounded-full bg-green-100 text-green-700 font-medium">‚úì Completed</span>
                        <button @onclick="@(async () => await ProgressService.MarkStepIncompleteAsync(11))"
                            class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm">Reset</button>
                    </div>
                }
                else
                {
                    <button @onclick="MarkComplete"
                        class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors">Mark
                        as Complete</button>
                }
            </div>
        </div>

        <!-- Navigation -->
        <div class="mt-8 flex items-center justify-between">
            <a href="/examples/step10" class="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                <span>‚Üê</span>
                Previous: Step 10
            </a>
            <a href="/examples/step12" class="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                Next: Step 12
                <span>‚Üí</span>
            </a>
        </div>
    </div>
</div>

@code {
    private bool isComplete = false;
    private IJSObjectReference? _copyModule;

    protected override async Task OnInitializedAsync()
    {
        var step = await ProgressService.GetStepAsync(11);
        isComplete = step?.IsComplete ?? false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _copyModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Examples/Step13Example.razor.js");
            // Initialize the inline demo data set for this page
            SeedDemoData();
        }
    }

    private async Task CopyFormCode()
    {
        if (_copyModule is not null)
            await _copyModule.InvokeVoidAsync("copyById", "s11-code-form");
    }

    private async Task CopyValidationCode()
    {
        if (_copyModule is not null)
            await _copyModule.InvokeVoidAsync("copyById", "s11-code-validation");
    }

    private async Task MarkComplete()
    {
        await ProgressService.MarkStepCompleteAsync(11);
        isComplete = true;
    }

    public async ValueTask DisposeAsync()
    {
        if (_copyModule is not null)
        {
            await _copyModule.DisposeAsync();
        }
    }

    // ---- Demo State (local to Step 11 page) ----
    private enum DemoLicenseLevel { ClassC = 1, ClassB = 2, ClassA = 3 }
    private enum DemoTruckClass { Light, Medium, Heavy }
    private enum DemoRouteType { Local, LongHaul, Hazmat, Oversized }

    private class DemoDriver
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public DemoLicenseLevel LicenseLevel { get; set; } = DemoLicenseLevel.ClassC;
        public int YearsOfExperience { get; set; }
        public bool IsAvailable { get; set; } = true;
    }

    private class DemoTruck
    {
        public int Id { get; set; }
        public string DisplayName { get; set; } = string.Empty;
        public DemoTruckClass Class { get; set; } = DemoTruckClass.Light;
        public bool IsAvailable { get; set; } = true;
        public bool InMaintenance { get; set; } = false;
    }

    private List<DemoDriver> demoDrivers = new();
    private List<DemoTruck> demoTrucks = new();
    private List<DemoRouteType> demoRouteTypes = Enum.GetValues<DemoRouteType>().ToList();
    private int? demoSelectedDriverId;
    private int? demoSelectedTruckId;
    private DemoRouteType? demoSelectedRouteType = null;
    private bool demoIsValid;
    private List<string> demoWarnings = new();

    // Note: OnAfterRenderAsync is already declared earlier; seed demo data there after module import.

    private void SeedDemoData()
    {
        if (demoDrivers.Count == 0)
        {
            demoDrivers = new()
            {
                new DemoDriver { Id = 1, Name = "Alex",  LicenseLevel = DemoLicenseLevel.ClassA, YearsOfExperience = 5, IsAvailable = true },
                new DemoDriver { Id = 2, Name = "Sam",   LicenseLevel = DemoLicenseLevel.ClassB, YearsOfExperience = 2, IsAvailable = true },
                new DemoDriver { Id = 3, Name = "Riley", LicenseLevel = DemoLicenseLevel.ClassC, YearsOfExperience = 1, IsAvailable = true },
            };
        }
        if (demoTrucks.Count == 0)
        {
            demoTrucks = new()
            {
                new DemoTruck { Id = 1, DisplayName = "Freightliner FL-01", Class = DemoTruckClass.Heavy,  IsAvailable = true,  InMaintenance = false },
                new DemoTruck { Id = 2, DisplayName = "Volvo VNL-22",     Class = DemoTruckClass.Medium, IsAvailable = true,  InMaintenance = false },
                new DemoTruck { Id = 3, DisplayName = "Ford F-150",       Class = DemoTruckClass.Light,  IsAvailable = true,  InMaintenance = false },
            };
        }
    }

    private void OnDemoDriverChanged(ChangeEventArgs e)
    {
        SeedDemoData();
        demoSelectedDriverId = int.TryParse(Convert.ToString(e.Value), out var id) ? id : null;
        ValidateDemo();
    }

    private void OnDemoTruckChanged(ChangeEventArgs e)
    {
        SeedDemoData();
        demoSelectedTruckId = int.TryParse(Convert.ToString(e.Value), out var id) ? id : null;
        ValidateDemo();
    }

    private void OnDemoRouteTypeChanged(ChangeEventArgs e)
    {
        var val = Convert.ToString(e.Value);
        if (string.IsNullOrWhiteSpace(val))
        {
            demoSelectedRouteType = null;
            ValidateDemo();
            return;
        }
        if (Enum.TryParse<DemoRouteType>(val, out var rt))
        {
            demoSelectedRouteType = rt;
            ValidateDemo();
        }
    }

    private void ResetDemo()
    {
        demoSelectedDriverId = null;
        demoSelectedTruckId = null;
        demoSelectedRouteType = null;
        demoWarnings.Clear();
        demoIsValid = false;
    }

    private void ValidateDemo()
    {
        SeedDemoData();
        demoWarnings.Clear();
        demoIsValid = true;

        var driver = demoSelectedDriverId.HasValue ? demoDrivers.FirstOrDefault(d => d.Id == demoSelectedDriverId.Value) : null;
        var truck  = demoSelectedTruckId.HasValue  ? demoTrucks.FirstOrDefault(t => t.Id == demoSelectedTruckId.Value) : null;

        if (driver is null || truck is null)
        {
            demoIsValid = false;
            return;
        }

        if (!driver.IsAvailable)
        {
            demoWarnings.Add($"‚ùå Driver {driver.Name} is not available");
            demoIsValid = false;
        }

        if (!truck.IsAvailable || truck.InMaintenance)
        {
            demoWarnings.Add($"‚ùå Truck {truck.DisplayName} is not available (maintenance)");
            demoIsValid = false;
        }

        bool licenseOk = truck.Class switch
        {
            DemoTruckClass.Heavy  => driver.LicenseLevel == DemoLicenseLevel.ClassA,
            DemoTruckClass.Medium => driver.LicenseLevel >= DemoLicenseLevel.ClassB,
            _ => true
        };
        if (!licenseOk)
        {
            demoWarnings.Add($"‚ùå {driver.Name} has {driver.LicenseLevel}, but {truck.DisplayName} requires higher license");
            demoIsValid = false;
        }

        if (demoSelectedRouteType is null)
        {
            demoWarnings.Add("‚ö†Ô∏è Please select a route type");
            demoIsValid = false;
            return;
        }

        var routeType = demoSelectedRouteType.Value;
        bool hasExperience = routeType switch
        {
            DemoRouteType.Hazmat    => driver.YearsOfExperience >= 2,
            DemoRouteType.Oversized => driver.YearsOfExperience >= 3,
            DemoRouteType.LongHaul  => driver.YearsOfExperience >= 1,
            _ => true
        };
        if (!hasExperience)
        {
            demoWarnings.Add($"‚ö†Ô∏è {driver.Name} has {driver.YearsOfExperience} years; {routeType} routes need more experience");
            demoIsValid = false;
        }

        if (demoIsValid && !demoWarnings.Any())
        {
            demoWarnings.Add("‚úÖ Assignment is valid and ready!");
        }
    }
}