@page "/examples/step6"
@inject NavigationManager Navigation
@inject ILearningProgressService ProgressService
@inject IJSRuntime JS
@implements IDisposable
@rendermode InteractiveServer

<div class="min-h-screen py-8 rounded-4xl bg-gray-50">
    <div class="w-full mx-auto px-4 max-w-5xl">
        <!-- Header -->
        <div class="mb-8">
            <a href="/guide"
                class="inline-flex items-center gap-2 text-sm sm:text-base text-blue-600 hover:text-blue-700 mb-4">
                <span>‚Üê</span> Back to Guide
            </a>
            <h1 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-4 break-words">
                üéØ Step 6: Routing & Navigation
            </h1>
            <p class="text-base sm:text-lg md:text-xl text-gray-600 leading-relaxed break-words">
                Define routes, navigate between pages, and use NavLink with active state and NavigationManager for
                programmatic navigation.
            </p>
        </div>

        <!-- Learning Objectives -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-semibold text-gray-800 mb-4 break-words">
                üéØ Learning Objectives
            </h2>
            <ul class="space-y-2 text-sm sm:text-base lg:text-lg text-gray-700">
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Understand the @("@")page directive for routing</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Use NavLink components for navigation</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Build a navigation menu in MainLayout</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Programmatically navigate using NavigationManager</span>
                </li>
            </ul>
        </div>

        <!-- Concept 0: MainLayout Setup for Fresh Apps -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-semibold text-gray-800 mb-4 break-words">
                üîß Setting Up Navigation (Fresh Apps)
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                New Blazor apps start with a minimal MainLayout. Here's how to transform it into a navigable app:
            </p>

            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">üß© Code Example: Default ‚Üí Navigation Ready</h3>
            <p class="text-sm sm:text-base text-gray-600 mb-2">
                Transform the default template into a working navigation structure.
            </p>
            <ul class="list-disc pl-5 text-sm sm:text-base text-gray-700 space-y-1 mb-4">
                <li>Default template only has <code class="px-1 rounded bg-gray-100">@@Body</code> and error handling</li>
                <li>Add basic navigation with <code class="px-1 rounded bg-gray-100">NavLink</code> components</li>
                <li>Include <code class="px-1 rounded bg-gray-100">Match="NavLinkMatch.All"</code> for home route</li>
            </ul>

            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto break-all mb-4">
                <pre data-code-title="Razor (MainLayout transformation)">


&lt;!-- AFTER: Full responsive navigation with logo and mobile menu --&gt;
@@inherits LayoutComponentBase
@@inject IJSRuntime JS

&lt;div class="min-h-screen"&gt;
    &lt;header class="py-6"&gt;
        &lt;div class="max-w-6xl mx-auto px-4"&gt;
            &lt;nav class="bg-black/85 text-white rounded-2xl px-4 md:py-6 py-4 shadow-md"&gt;
                &lt;div class="flex items-center justify-between md:justify-start md:gap-8"&gt;
                    &lt;!-- Brand with logo --&gt;
                    &lt;a href="/" class="flex items-center gap-2"&gt;
                        &lt;img src="https://cdn.simpleicons.org/blazor/512BD4" alt="Blazor"
                            class="h-8 w-8 sm:h-8 sm:w-8 flex-shrink-0" /&gt;
                        &lt;span class="text-sm sm:text-base font-semibold tracking-wide"&gt;Trucking Schedule&lt;/span&gt;
                    &lt;/a&gt;

                    &lt;!-- Desktop navigation links - centered --&gt;
                    &lt;ul class="hidden md:flex items-center justify-center gap-4 lg:gap-6 text-sm text-gray-200 flex-1"&gt;
                        &lt;li&gt;
                            &lt;NavLink href="/drivers" class="hover:text-white transition-colors"
                                ActiveClass="text-white font-semibold underline underline-offset-4"&gt;Drivers&lt;/NavLink&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;NavLink href="/trucks" class="hover:text-white transition-colors"
                                ActiveClass="text-white font-semibold underline underline-offset-4"&gt;Trucks&lt;/NavLink&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;NavLink href="/routes" class="hover:text-white transition-colors"
                                ActiveClass="text-white font-semibold underline underline-offset-4"&gt;Routes&lt;/NavLink&gt;
                        &lt;/li&gt;
                        &lt;li class="ml-4 pl-4 border-l border-white/20"&gt;
                            &lt;NavLink href="/demo/trucking-schedule"
                                class="px-3 py-1.5 bg-blue-600 hover:bg-blue-700 rounded-lg text-white font-medium transition-colors"
                                ActiveClass="bg-blue-700 text-white"&gt;Demo&lt;/NavLink&gt;
                        &lt;/li&gt;
                    &lt;/ul&gt;

                    &lt;!-- Mobile hamburger button with animation --&gt;
                    &lt;button type="button" @@onclick="ToggleMobileMenu"
                        class="md:hidden inline-flex items-center justify-center h-10 w-10 rounded-lg hover:bg-white/10 transition-transform duration-200 @@(isMobileMenuOpen ? "rotate-90" : "")"
                        aria-label="Toggle navigation"&gt;
                        &lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                            class="h-6 w-6 transition-all duration-300"&gt;
                            @@if (isMobileMenuOpen)
                            {
                                &lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12" /&gt;
                            }
                            else
                            {
                                &lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M4 6h16M4 12h16M4 18h16" /&gt;
                            }
                        &lt;/svg&gt;
                    &lt;/button&gt;
                &lt;/div&gt;

                &lt;!-- Mobile menu with smooth animation --&gt;
                &lt;div
                    class="md:hidden overflow-hidden transition-all duration-300 ease-in-out @@(isMobileMenuOpen ? "max-h-96 opacity-100" : "max-h-0 opacity-0")"&gt;
                    &lt;div class="mt-3 border-t border-white/10 pt-3"&gt;
                        &lt;nav class="flex flex-col gap-1"&gt;
                            &lt;NavLink href="/"
                                class="px-3 py-2 text-sm sm:text-base rounded-lg hover:bg-white/10 transition-colors"
                                ActiveClass="bg-white/10 text-white font-semibold" @@onclick="CloseMobileMenu"&gt;Dashboard
                            &lt;/NavLink&gt;
                            &lt;NavLink href="/drivers"
                                class="px-3 py-2 text-sm rounded-lg hover:bg-white/10 transition-colors"
                                ActiveClass="bg-white/10 text-white font-semibold" @@onclick="CloseMobileMenu"&gt;Drivers
                            &lt;/NavLink&gt;
                            &lt;NavLink href="/trucks"
                                class="px-3 py-2 text-sm rounded-lg hover:bg-white/10 transition-colors"
                                ActiveClass="bg-white/10 text-white font-semibold" @@onclick="CloseMobileMenu"&gt;Trucks
                            &lt;/NavLink&gt;
                            &lt;NavLink href="/routes"
                                class="px-3 py-2 text-sm sm:text-base rounded-lg hover:bg-white/10 transition-colors"
                                ActiveClass="bg-white/10 text-white font-semibold" @@onclick="CloseMobileMenu"&gt;Routes
                            &lt;/NavLink&gt;
                            &lt;div class="border-t border-white/10 my-2"&gt;&lt;/div&gt;
                            &lt;NavLink href="/demo/trucking-schedule"
                                class="px-3 py-2 text-sm rounded-lg bg-blue-600 hover:bg-blue-700 text-white font-medium transition-colors"
                                ActiveClass="bg-blue-700 text-white" @@onclick="CloseMobileMenu"&gt;üéÆ Demo&lt;/NavLink&gt;
                        &lt;/nav&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/nav&gt;
        &lt;/div&gt;
    &lt;/header&gt;

    &lt;main class="max-w-6xl mx-auto px-4 pb-12"&gt;
        &lt;div class="bg-white rounded-4xl p-6"&gt;
            @@Body
        &lt;/div&gt;
    &lt;/main&gt;
&lt;/div&gt;

&lt;div id="blazor-error-ui" data-nosnippet&gt;
    An unhandled error has occurred.
    &lt;a href="." class="reload"&gt;Reload&lt;/a&gt;
    &lt;span class="dismiss"&gt;üóô&lt;/span&gt;
&lt;/div&gt;

@@code {
    private bool isMobileMenuOpen;

    private void ToggleMobileMenu()
    {
        isMobileMenuOpen = !isMobileMenuOpen;
    }

    private void CloseMobileMenu()
    {
        isMobileMenuOpen = false;
    }
}
                </pre>
            </div>

            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="font-semibold text-gray-900 mb-2 text-sm sm:text-base break-words">
                        Key Features
                    </h3>
                    <ul class="text-xs sm:text-sm text-gray-700 space-y-1">
                        <li class="break-words">üñºÔ∏è Blazor logo with brand name</li>
                        <li class="break-words">üì± Responsive mobile hamburger menu</li>
                        <li class="break-words">üé® Smooth animations and transitions</li>
                        <li class="break-words">‚ö° Interactive state management</li>
                    </ul>
                </div>
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="font-semibold text-gray-900 mb-2 text-sm sm:text-base break-words">
                        Advanced Techniques
                    </h3>
                    <ul class="text-xs sm:text-sm text-gray-700 space-y-1">
                        <li class="break-words">üîÑ Conditional SVG rendering</li>
                        <li class="break-words">ÔøΩ Flexbox responsive layouts</li>
                        <li class="break-words">üéØ CSS transitions and transforms</li>
                        <li class="break-words">üöÄ Clean mobile UX patterns</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Concept 1: page Directive -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-semibold text-gray-800 mb-4 break-words">
                üìÑ The @@page Directive
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                The @@page directive tells Blazor what URL should navigate to this component. You can have multiple
                @@page directives for the same component!
            </p>

            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">üß© Code Example: page directive</h3>
            <p class="text-sm sm:text-base text-gray-600 mb-2">
                Map one or more routes to a component using the &#64;page directive.
            </p>
            <ul class="list-disc pl-5 text-sm sm:text-base text-gray-700 space-y-1 mb-4">
                <li>Use <code class="px-1 rounded bg-gray-100">&#64;page "..."</code> to define a route</li>
                <li>Multiple <code class="px-1 rounded bg-gray-100">&#64;page</code> directives are allowed</li>
                <li>Apply constraints like <code class="px-1 rounded bg-gray-100">{driverId:int}</code> as needed</li>
            </ul>

            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto break-all mb-4">
                <pre data-code-title="Razor (page directive)">
&lt;!-- Components/Pages/Drivers.razor --&gt;
&#64;page "/drivers"

&lt;div class=&quot;min-h-screen py-8 bg-gray-50&quot;&gt;
    &lt;div class=&quot;max-w-5xl mx-auto px-4&quot;&gt;
        &lt;h1 class=&quot;text-3xl font-bold text-gray-900 mb-6&quot;&gt;üöó Drivers&lt;/h1&gt;
        &lt;p class=&quot;text-gray-600&quot;&gt;Manage your truck drivers here.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;!-- Components/Pages/Trucks.razor --&gt;
&#64;page "/trucks"

&lt;div class=&quot;min-h-screen py-8 bg-gray-50&quot;&gt;
    &lt;div class=&quot;max-w-5xl mx-auto px-4&quot;&gt;
        &lt;h1 class=&quot;text-3xl font-bold text-gray-900 mb-6&quot;&gt;üöö Trucks&lt;/h1&gt;
        &lt;p class=&quot;text-gray-600&quot;&gt;Manage your fleet of trucks here.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;!-- Components/Pages/Routes.razor --&gt;
&#64;page "/routes"

&lt;div class=&quot;min-h-screen py-8 bg-gray-50&quot;&gt;
    &lt;div class=&quot;max-w-5xl mx-auto px-4&quot;&gt;
        &lt;h1 class=&quot;text-3xl font-bold text-gray-900 mb-6&quot;&gt;üõ£Ô∏è Routes&lt;/h1&gt;
        &lt;p class=&quot;text-gray-600&quot;&gt;Manage shipping routes and schedules.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;!-- Home page with multiple routes --&gt;
&#64;page "/"
&#64;page "/home"

&lt;div class=&quot;min-h-screen py-8 bg-gray-50&quot;&gt;
    &lt;div class=&quot;max-w-5xl mx-auto px-4&quot;&gt;
        &lt;h1 class=&quot;text-3xl font-bold text-gray-900 mb-6&quot;&gt;üè† Trucking Schedule Dashboard&lt;/h1&gt;
        &lt;p class=&quot;text-gray-600&quot;&gt;Welcome to your trucking management system. This page can be accessed via both / and /home routes.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
                </pre>
            </div>

            <div class="bg-blue-50 border-l-4 border-blue-500 p-4 mb-4">
                <p class="text-sm sm:text-base text-blue-800 break-words">
                    <strong>üí° Pro Tip:</strong> Use route parameters like @@page "/driver/{driverId:int}" to pass data
                    through URLs!
                </p>
            </div>

            <div class="bg-gray-50 rounded-lg p-4 mt-4">
                <h4 class="font-semibold text-gray-900 mb-2">üõ†Ô∏è How to implement this:</h4>
                <ol class="list-decimal ml-5 space-y-1 text-sm text-gray-700">
                    <li>Create your page files: <code>Components/Pages/Drivers.razor</code>, <code>Trucks.razor</code>, <code>Routes.razor</code></li>
                    <li>Add the <code>@@page</code> directive at the very top of each file</li>
                    <li>Add your page content below the directive</li>
                    <li>Test by navigating to <code>/drivers</code>, <code>/trucks</code>, <code>/routes</code> in your browser</li>
                </ol>
            </div>
        </div>

        <!-- Concept 2: NavLink Component -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-semibold text-gray-800 mb-4 break-words">
                üîó NavLink Component
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                NavLink is a special component that generates an anchor tag with automatic active state styling. It's
                perfect for navigation menus!
            </p>

            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">üß© Code Example: NavLink</h3>
            <p class="text-sm sm:text-base text-gray-600 mb-2">
                Use NavLink to get automatic active styling based on the current URL.
            </p>
            <ul class="list-disc pl-5 text-sm sm:text-base text-gray-700 space-y-1 mb-4">
                <li><code class="px-1 rounded bg-gray-100">Match</code> controls prefix vs exact matching</li>
                <li>Set <code class="px-1 rounded bg-gray-100">ActiveClass</code> for custom active styles</li>
                <li>Prefer NavLink over plain anchors for menus</li>
            </ul>

            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto break-all mb-4">
                <pre data-code-title="Razor (NavLink)">
&lt;nav class=&quot;bg-blue-600 text-white shadow-lg&quot;&gt;
    &lt;div class=&quot;max-w-7xl mx-auto px-4&quot;&gt;
        &lt;div class=&quot;flex items-center justify-between h-16&quot;&gt;
            &lt;div class=&quot;text-xl font-bold&quot;&gt;Trucking Schedule&lt;/div&gt;
            
            &lt;div class=&quot;flex gap-4&quot;&gt;
                &lt;NavLink href=&quot;/&quot; Match=&quot;NavLinkMatch.All&quot;
                         class=&quot;px-3 py-2 rounded hover:bg-blue-700&quot;
                         ActiveClass=&quot;bg-blue-800&quot;&gt;
                    Home
                &lt;/NavLink&gt;
                
                &lt;NavLink href=&quot;/drivers&quot;
                         class=&quot;px-3 py-2 rounded hover:bg-blue-700&quot;
                         ActiveClass=&quot;bg-blue-800&quot;&gt;
                    Drivers
                &lt;/NavLink&gt;
                
                &lt;NavLink href=&quot;/trucks&quot;
                         class=&quot;px-3 py-2 rounded hover:bg-blue-700&quot;
                         ActiveClass=&quot;bg-blue-800&quot;&gt;
                    Trucks
                &lt;/NavLink&gt;
                
                &lt;NavLink href=&quot;/routes&quot;
                         class=&quot;px-3 py-2 rounded hover:bg-blue-700&quot;
                         ActiveClass=&quot;bg-blue-800&quot;&gt;
                    Routes
                &lt;/NavLink&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/nav&gt;
                </pre>
            </div>

            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="font-semibold text-gray-900 mb-2 text-sm sm:text-base break-words">
                        NavLink Properties
                    </h3>
                    <ul class="text-xs sm:text-sm text-gray-700 space-y-1">
                        <li class="break-words"><strong>href:</strong> The target URL</li>
                        <li class="break-words"><strong>Match:</strong> How to match routes</li>
                        <li class="break-words"><strong>ActiveClass:</strong> Custom active class</li>
                    </ul>
                </div>
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="font-semibold text-gray-900 mb-2 text-sm sm:text-base break-words">
                        Match Options
                    </h3>
                    <ul class="text-xs sm:text-sm text-gray-700 space-y-1">
                        <li class="break-words"><strong>Prefix:</strong> Match if URL starts with href</li>
                        <li class="break-words"><strong>All:</strong> Match only if URL is exactly href</li>
                    </ul>
                </div>
            </div>

            <div class="bg-gray-50 rounded-lg p-4 mt-4">
                <h4 class="font-semibold text-gray-900 mb-2">üõ†Ô∏è How to implement this:</h4>
                <ol class="list-decimal ml-5 space-y-1 text-sm text-gray-700">
                    <li>Replace regular <code>&lt;a&gt;</code> tags with <code>&lt;NavLink&gt;</code> components</li>
                    <li>Add <code>ActiveClass</code> to style the current page link</li>
                    <li>Use <code>Match="NavLinkMatch.All"</code> for home page to avoid partial matches</li>
                    <li>Test by clicking links and seeing active state highlight current page</li>
                </ol>
            </div>
        </div>

        <!-- Concept 3: Navigation Menu Example -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-semibold text-gray-800 mb-4 break-words">
                üçî Building a Navigation Menu
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                Here's a complete example of a responsive navigation menu you can add to MainLayout.razor:
            </p>

            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">üß© Code Example: Responsive navigation with mobile menu
            </h3>
            <p class="text-sm sm:text-base text-gray-600 mb-2">
                A fully responsive navbar with logo, mobile hamburger menu, and smooth animations.
            </p>
            <ul class="list-disc pl-5 text-sm sm:text-base text-gray-700 space-y-1 mb-4">
                <li>Includes Blazor logo and brand name</li>
                <li>Animated hamburger menu for mobile devices</li>
                <li>Smooth mobile menu transitions</li>
                <li>Flexible responsive layout with Tailwind CSS</li>
            </ul>

            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto break-all mb-4">
                <pre data-code-title="Razor (Full responsive MainLayout nav)">
&lt;!-- MainLayout.razor - Complete responsive navigation --&gt;
@@inherits LayoutComponentBase
@@inject IJSRuntime JS

&lt;div class="min-h-screen"&gt;
    &lt;header class="py-6"&gt;
        &lt;div class="max-w-6xl mx-auto px-4"&gt;
            &lt;nav class="bg-black/85 text-white rounded-2xl px-4 md:py-6 py-4 shadow-md"&gt;
                &lt;div class="flex items-center justify-between md:justify-start md:gap-8"&gt;
                    &lt;!-- Brand with logo --&gt;
                    &lt;a href="/" class="flex items-center gap-2"&gt;
                        &lt;img src="https://cdn.simpleicons.org/blazor/512BD4" alt="Blazor"
                            class="h-8 w-8 sm:h-8 sm:w-8 flex-shrink-0" /&gt;
                        &lt;span class="text-sm sm:text-base font-semibold tracking-wide"&gt;Trucking Schedule&lt;/span&gt;
                    &lt;/a&gt;

                    &lt;!-- Desktop navigation links - centered --&gt;
                    &lt;ul class="hidden md:flex items-center justify-center gap-4 lg:gap-6 text-sm text-gray-200 flex-1"&gt;
                        &lt;li&gt;
                            &lt;NavLink href="/drivers" class="hover:text-white transition-colors"
                                ActiveClass="text-white font-semibold underline underline-offset-4"&gt;Drivers&lt;/NavLink&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;NavLink href="/trucks" class="hover:text-white transition-colors"
                                ActiveClass="text-white font-semibold underline underline-offset-4"&gt;Trucks&lt;/NavLink&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;NavLink href="/routes" class="hover:text-white transition-colors"
                                ActiveClass="text-white font-semibold underline underline-offset-4"&gt;Routes&lt;/NavLink&gt;
                        &lt;/li&gt;
                        &lt;li class="ml-4 pl-4 border-l border-white/20"&gt;
                            &lt;NavLink href="/demo/trucking-schedule"
                                class="px-3 py-1.5 bg-blue-600 hover:bg-blue-700 rounded-lg text-white font-medium transition-colors"
                                ActiveClass="bg-blue-700 text-white"&gt;Demo&lt;/NavLink&gt;
                        &lt;/li&gt;
                    &lt;/ul&gt;

                    &lt;!-- Mobile hamburger button with animation --&gt;
                    &lt;button type="button" @@onclick="ToggleMobileMenu"
                        class="md:hidden inline-flex items-center justify-center h-10 w-10 rounded-lg hover:bg-white/10 transition-transform duration-200 @@(isMobileMenuOpen ? "rotate-90" : "")"
                        aria-label="Toggle navigation"&gt;
                        &lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                            class="h-6 w-6 transition-all duration-300"&gt;
                            @@if (isMobileMenuOpen)
                            {
                                &lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12" /&gt;
                            }
                            else
                            {
                                &lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M4 6h16M4 12h16M4 18h16" /&gt;
                            }
                        &lt;/svg&gt;
                    &lt;/button&gt;
                &lt;/div&gt;

                &lt;!-- Mobile menu with smooth animation --&gt;
                &lt;div
                    class="md:hidden overflow-hidden transition-all duration-300 ease-in-out @@(isMobileMenuOpen ? "max-h-96 opacity-100" : "max-h-0 opacity-0")"&gt;
                    &lt;div class="mt-3 border-t border-white/10 pt-3"&gt;
                        &lt;nav class="flex flex-col gap-1"&gt;
                            &lt;NavLink href="/"
                                class="px-3 py-2 text-sm sm:text-base rounded-lg hover:bg-white/10 transition-colors"
                                ActiveClass="bg-white/10 text-white font-semibold" @@onclick="CloseMobileMenu"&gt;Dashboard
                            &lt;/NavLink&gt;
                            &lt;NavLink href="/drivers"
                                class="px-3 py-2 text-sm rounded-lg hover:bg-white/10 transition-colors"
                                ActiveClass="bg-white/10 text-white font-semibold" @@onclick="CloseMobileMenu"&gt;Drivers
                            &lt;/NavLink&gt;
                            &lt;NavLink href="/trucks"
                                class="px-3 py-2 text-sm rounded-lg hover:bg-white/10 transition-colors"
                                ActiveClass="bg-white/10 text-white font-semibold" @@onclick="CloseMobileMenu"&gt;Trucks
                            &lt;/NavLink&gt;
                            &lt;NavLink href="/routes"
                                class="px-3 py-2 text-sm sm:text-base rounded-lg hover:bg-white/10 transition-colors"
                                ActiveClass="bg-white/10 text-white font-semibold" @@onclick="CloseMobileMenu"&gt;Routes
                            &lt;/NavLink&gt;
                            &lt;div class="border-t border-white/10 my-2"&gt;&lt;/div&gt;
                            &lt;NavLink href="/demo/trucking-schedule"
                                class="px-3 py-2 text-sm rounded-lg bg-blue-600 hover:bg-blue-700 text-white font-medium transition-colors"
                                ActiveClass="bg-blue-700 text-white" @@onclick="CloseMobileMenu"&gt;üéÆ Demo&lt;/NavLink&gt;
                        &lt;/nav&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/nav&gt;
        &lt;/div&gt;
    &lt;/header&gt;

    &lt;main class="max-w-6xl mx-auto px-4 pb-12"&gt;
        &lt;div class="bg-white rounded-4xl p-6"&gt;
            @@Body
        &lt;/div&gt;
    &lt;/main&gt;
&lt;/div&gt;

@@code {
    private bool isMobileMenuOpen;

    private void ToggleMobileMenu()
    {
        isMobileMenuOpen = !isMobileMenuOpen;
    }

    private void CloseMobileMenu()
    {
        isMobileMenuOpen = false;
    }
}
                </pre>
            </div>

            <div class="bg-gray-50 rounded-lg p-4 mt-4">
                <h4 class="font-semibold text-gray-900 mb-2">üõ†Ô∏è How to implement this:</h4>
                <ol class="list-decimal ml-5 space-y-1 text-sm text-gray-700">
                    <li>Open <code>Components/Layout/MainLayout.razor</code></li>
                    <li>Replace the entire content with the responsive navigation code above</li>
                    <li>Add <code>@@inject IJSRuntime JS</code> at the top if needed for JavaScript interactions</li>
                    <li>Test the mobile menu by resizing your browser window</li>
                </ol>
            </div>
        </div>

        <!-- Concept 4: Programmatic Navigation -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-semibold text-gray-800 mb-4 break-words">
                üß≠ Programmatic Navigation
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                Sometimes you need to navigate from code (like after saving a form). Use NavigationManager for this!
            </p>

            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">üß© Code Example: Programmatic navigation
            </h3>
            <p class="text-sm sm:text-base text-gray-600 mb-2">
                Navigate after actions (e.g., on valid form submission) using NavigationManager.
            </p>
            <ul class="list-disc pl-5 text-sm sm:text-base text-gray-700 space-y-1 mb-4">
                <li>Inject <code class="px-1 rounded bg-gray-100">NavigationManager</code> into the component</li>
                <li>Call <code class="px-1 rounded bg-gray-100">NavigateTo(url, forceLoad: false)</code> to navigate
                </li>
                <li>Optionally set <code class="px-1 rounded bg-gray-100">forceLoad: true</code> to reload the page</li>
            </ul>

            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto break-all mb-4">
                <pre data-code-title="Razor + C# (Programmatic navigation)">
&#64;page "/driver/add"
&#64;inject NavigationManager Navigation

&lt;EditForm Model="newDriver" OnValidSubmit="HandleValidSubmit"&gt;
    &lt;!-- Form fields here --&gt;
    &lt;button type="submit"&gt;Save Driver&lt;/button&gt;
&lt;/EditForm&gt;

&#64;code {
    private Driver newDriver = new();
    
    // Navigate to drivers list after successful save
    private async Task HandleValidSubmit()
    {
        // Save the driver to database...
        await SaveDriverAsync(newDriver);
        
        // Navigate to the drivers list
        Navigation.NavigateTo("/drivers");
    }
    
    // Force reload the page (useful for fresh data)
    private void NavigateWithReload()
    {
        Navigation.NavigateTo("/drivers", forceLoad: true);
    }
}
                </pre>
            </div>

            <div class="bg-yellow-50 border-l-4 border-yellow-500 p-4">
                <p class="text-sm sm:text-base text-yellow-800 break-words">
                    <strong>‚ö†Ô∏è Important:</strong> Always inject NavigationManager at the top of your component with
                    @@inject NavigationManager Navigation
                </p>
            </div>

            <div class="bg-gray-50 rounded-lg p-4 mt-4">
                <h4 class="font-semibold text-gray-900 mb-2">üõ†Ô∏è How to implement this:</h4>
                <ol class="list-decimal ml-5 space-y-1 text-sm text-gray-700">
                    <li>Add <code>@@inject NavigationManager Navigation</code> at the top of your component</li>
                    <li>Call <code>Navigation.NavigateTo("/your-route")</code> in event handlers</li>
                    <li>Use after form submissions, button clicks, or conditional logic</li>
                    <li>Test by triggering the action and verifying navigation works</li>
                </ol>
            </div>
        </div>

        <!-- Interactive Demo -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-semibold text-gray-800 mb-4 break-words">
                üéÆ Interactive Demo
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                Try these navigation examples:
            </p>

            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <button @onclick='() => Navigation.NavigateTo("/")'
                    class="px-4 py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-lg text-sm sm:text-base break-words">
                    Navigate to Home
                </button>

                <button @onclick='() => Navigation.NavigateTo("/drivers")'
                    class="px-4 py-3 bg-green-500 hover:bg-green-600 text-white rounded-lg text-sm sm:text-base break-words">
                    Navigate to Drivers
                </button>

                <button @onclick='() => Navigation.NavigateTo("/trucks")'
                    class="px-4 py-3 bg-purple-500 hover:bg-purple-600 text-white rounded-lg text-sm sm:text-base break-words">
                    Navigate to Trucks
                </button>

                <button @onclick='() => Navigation.NavigateTo("/routes")'
                    class="px-4 py-3 bg-indigo-500 hover:bg-indigo-600 text-white rounded-lg text-sm sm:text-base break-words">
                    Navigate to Routes
                </button>
            </div>

            <div class="mt-4 p-4 bg-gray-50 rounded-lg">
                <p class="text-xs sm:text-sm text-gray-700 break-words">
                    <strong>Current URL:</strong> @currentUri
                </p>
            </div>
        </div>

        <!-- Key Takeaways -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-semibold text-gray-800 mb-4 break-words">
                üîë Key Takeaways
            </h2>
            <ul class="space-y-3 text-sm sm:text-base lg:text-lg text-gray-700">
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Use <code class="bg-gray-200 px-2 py-1 rounded">@@page</code>
                        directive to define routes for components</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Use <code class="bg-gray-200 px-2 py-1 rounded">NavLink</code> for
                        navigation menus with automatic active state</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Inject <code
                            class="bg-gray-200 px-2 py-1 rounded">NavigationManager</code> for programmatic
                        navigation</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Use <code
                            class="bg-gray-200 px-2 py-1 rounded">Match="NavLinkMatch.All"</code> for exact route
                        matching</span>
                </li>
            </ul>
        </div>

        <!-- Mark Complete Button -->
        <div class="bg-white rounded-xl p-6 border-2 border-green-200 mb-6">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                <div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-1">Ready to move on?</h3>
                    <p class="text-sm text-gray-600">Mark this step as complete to track your progress.</p>
                </div>
                @if (isComplete)
                {
                    <div class="flex items-center gap-3">
                        <span class="px-4 py-2 rounded-full bg-green-100 text-green-700 font-medium">‚úì Completed</span>
                        <button @onclick="@(async () => await ProgressService.MarkStepIncompleteAsync(6))"
                            class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm">Reset</button>
                    </div>
                }
                else
                {
                    <button @onclick="MarkComplete"
                        class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors">
                        Mark as Complete
                    </button>
                }
            </div>
        </div>

        <!-- Navigation -->
        <div class="mt-8 flex items-center justify-between">
            <a href="/examples/step5"
                class="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                <span>‚Üê</span>
                Previous: Step 5
            </a>
            <a href="/examples/step7"
                class="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                Next: Step 7
                <span>‚Üí</span>
            </a>
        </div>
    </div>
</div>

@code {
    private bool isComplete = false;
    private string currentUri = string.Empty;
    private IJSObjectReference? _copyModule;

    protected override void OnInitialized()
    {
        // Subscribe to navigation changes
        Navigation.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        // Load completion state (async via interface)
        var step = await ProgressService.GetStepAsync(6);
        isComplete = step?.IsComplete ?? false;
        currentUri = Navigation.Uri;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _copyModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/codeblocks.js");
                await _copyModule.InvokeVoidAsync("enhancePreBlocks");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to load code block enhancer: {ex.Message}");
            }
        }
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        currentUri = e.Location;
        StateHasChanged();
    }

    private async Task MarkComplete()
    {
        await ProgressService.MarkStepCompleteAsync(6);
        isComplete = true;
    }

    private void GoBack()
    {
        // In a real app, you might use JavaScript interop for browser history
        // For now, just navigate to guide
        Navigation.NavigateTo("/guide");
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
        _copyModule?.DisposeAsync();
    }

}