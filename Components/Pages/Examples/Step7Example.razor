@page "/examples/step7"
@inject ILearningProgressService ProgressService
@using BlazorMock.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.Linq
@rendermode InteractiveServer

<div class="min-h-screen py-8 bg-gray-50">
    <div class="w-full mx-auto px-4 max-w-5xl">
        <!-- Header -->
        <div class="mb-8">
            <a href="/guide" class="inline-flex items-center gap-2 text-blue-600 hover:text-blue-700 mb-4">
                <span>‚Üê</span> Back to Guide
            </a>
            <h1 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-4 break-words">
                üéØ Step 7: EF Core Models
            </h1>
            <p class="text-base sm:text-lg md:text-xl text-gray-600 leading-relaxed break-words">
                Learn to create domain models for Entity Framework Core.
            </p>
        </div>

        <!-- Learning Objectives -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üéØ Learning Objectives
            </h2>
            <ul class="space-y-2 text-sm sm:text-base lg:text-lg text-gray-700">
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Create POCO (Plain Old CLR Object) models</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Use Data Annotations for validation and database configuration</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Define enums for structured data types</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Set up relationships between models</span>
                </li>
            </ul>
        </div>

        <!-- Driver Model Example -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üöö Driver Model
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                The Driver model represents a truck driver with license information, experience, and availability.
            </p>
            
            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto mb-4">
                <pre class="text-xs sm:text-sm text-gray-800 font-mono"><code>using System.ComponentModel.DataAnnotations;

public class Driver
{
    // Primary Key - EF Core recognizes "Id" automatically
    public int Id { get; set; }

    // Required field with max length
    [Required(ErrorMessage = "Driver name is required")]
    [StringLength(100)]
    public string Name { get; set; } = string.Empty;

    [Required]
    [StringLength(50)]
    public string LicenseNumber { get; set; } = string.Empty;

    // Enum property for structured data
    [Required]
    public LicenseLevel LicenseLevel { get; set; }

    // Range validation
    [Range(0, 50, ErrorMessage = "Experience must be 0-50 years")]
    public int YearsOfExperience { get; set; }

    [Range(0, 200)]
    public decimal HourlyRate { get; set; }

    public bool IsAvailable { get; set; } = true;

    // Navigation property - One driver has many routes
    public ICollection&lt;Route&gt; Routes { get; set; } = new List&lt;Route&gt;();
}</code></pre>
            </div>
        </div>

        <!-- License Level Enum -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üìã License Level Enum
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                Enums provide type-safe options for categorical data. Perfect for dropdowns and validation.
            </p>
            
            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto mb-4">
                <pre class="text-xs sm:text-sm text-gray-800 font-mono"><code>public enum LicenseLevel
{
    [Display(Name = "Class C (Light Vehicles)")]
    ClassC = 1,

    [Display(Name = "Class B (Medium Vehicles)")]
    ClassB = 2,

    [Display(Name = "Class A (Heavy Vehicles)")]
    ClassA = 3
}</code></pre>
            </div>

            <div class="bg-blue-50 border-l-4 border-blue-500 p-4">
                <p class="text-sm sm:text-base text-blue-800 break-words">
                    <strong>üí° Pro Tip:</strong> Use the [Display] attribute to show user-friendly names in forms and dropdowns!
                </p>
            </div>
        </div>

        <!-- Data Annotations Reference -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üè∑Ô∏è Common Data Annotations
            </h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="font-semibold text-gray-900 mb-3 text-sm sm:text-base">Validation</h3>
                    <div class="space-y-2 text-xs sm:text-sm">
                        <div class="break-words">
                            <code class="bg-gray-200 px-2 py-1 rounded">[Required]</code>
                            <p class="text-gray-600 mt-1">Field must have a value</p>
                        </div>
                        <div class="break-words">
                            <code class="bg-gray-200 px-2 py-1 rounded">[StringLength(100)]</code>
                            <p class="text-gray-600 mt-1">Max length constraint</p>
                        </div>
                        <div class="break-words">
                            <code class="bg-gray-200 px-2 py-1 rounded">[Range(0, 100)]</code>
                            <p class="text-gray-600 mt-1">Numeric range validation</p>
                        </div>
                        <div class="break-words">
                            <code class="bg-gray-200 px-2 py-1 rounded">[EmailAddress]</code>
                            <p class="text-gray-600 mt-1">Valid email format</p>
                        </div>
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="font-semibold text-gray-900 mb-3 text-sm sm:text-base">Database</h3>
                    <div class="space-y-2 text-xs sm:text-sm">
                        <div class="break-words">
                            <code class="bg-gray-200 px-2 py-1 rounded">[Key]</code>
                            <p class="text-gray-600 mt-1">Primary key (auto for "Id")</p>
                        </div>
                        <div class="break-words">
                            <code class="bg-gray-200 px-2 py-1 rounded">[ForeignKey("DriverId")]</code>
                            <p class="text-gray-600 mt-1">Foreign key relationship</p>
                        </div>
                        <div class="break-words">
                            <code class="bg-gray-200 px-2 py-1 rounded">[Column(TypeName="decimal(10,2)")]</code>
                            <p class="text-gray-600 mt-1">Specific column type</p>
                        </div>
                        <div class="break-words">
                            <code class="bg-gray-200 px-2 py-1 rounded">[Display(Name="Full Name")]</code>
                            <p class="text-gray-600 mt-1">Display label in UI</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Relationships -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üîó Model Relationships
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                Entity Framework Core supports various relationship types through navigation properties.
            </p>
            
            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto mb-4">
                <pre class="text-xs sm:text-sm text-gray-800 font-mono"><code>// One-to-Many: One Driver has Many Routes
public class Driver
{
    public int Id { get; set; }
    public string Name { get; set; }
    
    // Navigation property (collection)
    public ICollection&lt;Route&gt; Routes { get; set; } = new List&lt;Route&gt;();
}

public class Route
{
    public int Id { get; set; }
    
    // Foreign key
    public int DriverId { get; set; }
    
    // Navigation property (single)
    public Driver Driver { get; set; } = null!;
}</code></pre>
            </div>

            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                <div class="bg-blue-50 p-4 rounded-lg border border-blue-100">
                    <h3 class="font-semibold text-blue-900 mb-2 text-sm sm:text-base break-words">
                        One-to-Many
                    </h3>
                    <p class="text-xs sm:text-sm text-blue-800 break-words">
                        One driver ‚Üí Many routes
                    </p>
                </div>
                <div class="bg-green-50 p-4 rounded-lg border border-green-100">
                    <h3 class="font-semibold text-green-900 mb-2 text-sm sm:text-base break-words">
                        Many-to-One
                    </h3>
                    <p class="text-xs sm:text-sm text-green-800 break-words">
                        Many routes ‚Üí One driver
                    </p>
                </div>
                <div class="bg-purple-50 p-4 rounded-lg border border-purple-100">
                    <h3 class="font-semibold text-purple-900 mb-2 text-sm sm:text-base break-words">
                        Many-to-Many
                    </h3>
                    <p class="text-xs sm:text-sm text-purple-800 break-words">
                        Use junction table
                    </p>
                </div>
            </div>
        </div>

        <!-- Business Logic in Models -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üß† Business Logic in Models
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                Models can contain methods for business logic related to the entity.
            </p>
            
            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto mb-4">
                <pre class="text-xs sm:text-sm text-gray-800 font-mono"><code>public class Driver
{
    public LicenseLevel LicenseLevel { get; set; }
    public int YearsOfExperience { get; set; }

    // Business logic method
    public bool CanDriveTruckClass(TruckClass truckClass)
    {
        return truckClass switch
        {
            TruckClass.Heavy => LicenseLevel == LicenseLevel.ClassA,
            TruckClass.Medium => LicenseLevel >= LicenseLevel.ClassB,
            TruckClass.Light => true,
            _ => false
        };
    }

    // Calculated property
    public int GetEffectiveExperience()
    {
        int bonus = LicenseLevel switch
        {
            LicenseLevel.ClassA => 5,
            LicenseLevel.ClassB => 3,
            LicenseLevel.ClassC => 0,
            _ => 0
        };
        return YearsOfExperience + bonus;
    }
}</code></pre>
            </div>
        </div>

        <!-- Interactive Demo -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üéÆ Interactive Demo
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                Create a sample driver and see the model in action:
            </p>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Name:</label>
                    <input type="text" @bind="sampleDriver.Name" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 text-gray-900" 
                           placeholder="John Doe" />
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">License Number:</label>
                    <input type="text" @bind="sampleDriver.LicenseNumber" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 text-gray-900" 
                           placeholder="CDL123456" />
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">License Level:</label>
                    <InputSelect @bind-Value="sampleDriver.LicenseLevel"
                                 class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 text-gray-900">
                        @foreach (var level in Enum.GetValues<LicenseLevel>())
                        {
                            <option value="@level">@GetLicenseDisplay(level)</option>
                        }
                    </InputSelect>
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Years of Experience:</label>
                    <input type="number" @bind="sampleDriver.YearsOfExperience" min="0" max="50"
                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 text-gray-900" />
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Hourly Rate:</label>
                    <input type="number" @bind="sampleDriver.HourlyRate" min="0" max="200" step="0.01"
                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 text-gray-900" />
                </div>
                
                <div class="flex items-center">
                    <label class="flex items-center gap-2 text-sm font-medium text-gray-700">
                        <input type="checkbox" @bind="sampleDriver.IsAvailable" 
                               class="w-5 h-5 text-purple-600 border-gray-300 rounded focus:ring-purple-500" />
                        Available for Assignment
                    </label>
                </div>
            </div>

            <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900 mb-3">üìã Model Instance:</h3>
                <div class="space-y-2 text-sm font-mono text-gray-700">
                    <p><strong>Name:</strong> @sampleDriver.Name</p>
                    <p><strong>License Number:</strong> @sampleDriver.LicenseNumber</p>
                    <p><strong>License Level:</strong> @GetLicenseDisplay(sampleDriver.LicenseLevel)</p>
                    <p><strong>Experience:</strong> @sampleDriver.YearsOfExperience years</p>
                    <p><strong>Hourly Rate:</strong> $@sampleDriver.HourlyRate.ToString("F2")</p>
                    <p><strong>Status:</strong> @(sampleDriver.IsAvailable ? "‚úÖ Available" : "‚ùå Unavailable")</p>
                </div>
            </div>
        </div>

        <!-- Key Takeaways -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üîë Key Takeaways
            </h2>
            <ul class="space-y-3 text-sm sm:text-base lg:text-lg text-gray-700">
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Models are POCOs (Plain Old CLR Objects) - simple C# classes</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Use Data Annotations for validation and database configuration</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Enums provide type-safe categorical data</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Navigation properties define relationships between entities</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Models can include business logic methods</span>
                </li>
            </ul>
        </div>

        <!-- Mark Complete Button -->
        <div class="bg-white rounded-xl p-6 border-2 border-green-200">
            <div class="flex flex-col sm:flex-row items-center justify-between gap-4">
                <div class="min-w-0 flex-1">
                    <h3 class="text-lg sm:text-xl font-bold text-gray-900 mb-2 break-words">
                        Ready to move on?
                    </h3>
                    <p class="text-sm sm:text-base text-gray-600 break-words">
                        Mark this step as complete to track your progress!
                    </p>
                </div>
                @if (isComplete)
                {
                    <div class="flex items-center gap-3">
                        <span class="px-4 py-2 rounded-full bg-green-100 text-green-700 font-medium">‚úì Completed</span>
                        <button @onclick="@(async ()=> await ProgressService.MarkStepIncompleteAsync(7))" class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm">Reset</button>
                    </div>
                }
                else
                {
                    <button @onclick="MarkComplete" class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors">
                        Mark as Complete
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private bool isComplete = false;
    
    // Sample driver for interactive demo
    private class SampleDriver
    {
        public string Name { get; set; } = "John Doe";
        public string LicenseNumber { get; set; } = "CDL123456";
        public LicenseLevel LicenseLevel { get; set; } = LicenseLevel.ClassA;
        public int YearsOfExperience { get; set; } = 5;
        public decimal HourlyRate { get; set; } = 35.50m;
        public bool IsAvailable { get; set; } = true;
    }

    private SampleDriver sampleDriver = new();

    protected override async Task OnInitializedAsync()
    {
        var step = await ProgressService.GetStepAsync(7);
        isComplete = step?.IsComplete ?? false;
    }

    private async Task MarkComplete()
    {
        await ProgressService.MarkStepCompleteAsync(7);
        isComplete = true;
    }
    
    private static string GetLicenseDisplay(LicenseLevel level)
    {
        var member = typeof(LicenseLevel).GetMember(level.ToString()).FirstOrDefault();
        if (member is not null)
        {
            var displayAttr = (DisplayAttribute?)Attribute.GetCustomAttribute(member, typeof(DisplayAttribute));
            if (displayAttr?.Name is string name && !string.IsNullOrWhiteSpace(name))
            {
                return name;
            }
        }
        return level.ToString();
    }
}
