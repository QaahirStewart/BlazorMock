@page "/examples/step10"
@inject ILearningProgressService ProgressService
@implements IDisposable
@* JS-based copy removed; per-block Show code + Copy handled by global enhancer *@
@rendermode InteractiveServer

<PageTitle>Step 10: State Management - Example</PageTitle>

<div class="min-h-screen py-8 rounded-4xl bg-gray-50">
    <div class="w-full mx-auto px-4 max-w-5xl">
        <div class="mb-8">
            <a href="/guide" class="inline-flex items-center gap-2 text-blue-600 hover:text-blue-700 mb-4">
                <span>‚Üê</span> Back to Guide
            </a>
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-4">
                <div class="min-w-0 flex-1">
                    <h1 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-2 break-words">üéØ Step 10: State
                        Management</h1>
                    <p class="text-base sm:text-lg md:text-xl text-gray-600 leading-relaxed break-words">Share data
                        between components using services and cascading parameters.</p>
                </div>

            </div>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üéØ Learning Objectives
            </h2>
            <ul class="space-y-2 text-sm sm:text-base lg:text-lg text-gray-700">
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Create a state management service</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Understand service lifetimes (Scoped, Singleton, Transient)</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Use events to notify components of state changes</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Implement cascading parameters for app-wide data</span>
                </li>
            </ul>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üèóÔ∏è Create AppState Service
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                Centralize app-wide UI state in a service. Expose properties and fire an <code
                    class="bg-gray-200 px-1 rounded">OnChange</code> event
                so components can refresh when state updates.
            </p>

            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">üß© Code Example: AppState service</h3>
            <ul class="list-disc pl-5 text-sm sm:text-base text-gray-700 space-y-1 mb-4">
                <li>Centralize UI state and notify via an <code class="px-1 rounded bg-gray-100">Action</code> event</li>
            </ul>
            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto break-all mb-4">
                <pre data-code-title="C# (Services/AppState.cs)">
// Services/AppState.cs
namespace BlazorMock.Services;

public class AppState
{
    // Private field to store the selected driver
    private Driver? _selectedDriver;

    // Public property with private setter
    public Driver? SelectedDriver
    {
        get =&gt; _selectedDriver;
        private set
        {
            _selectedDriver = value;
            NotifyStateChanged();
        }
    }

    // Event to notify subscribers of state changes
    public event Action? OnChange;

    // Method to update the selected driver
    public void SelectDriver(Driver? driver)
    {
        SelectedDriver = driver;
    }

    // Method to clear selection
    public void ClearSelection()
    {
        SelectedDriver = null;
    }

    // Notify all subscribers that state has changed
    private void NotifyStateChanged() =&gt; OnChange?.Invoke();
}
                </pre>
            </div>

            <div class="bg-blue-50 border-l-4 border-blue-500 p-4">
                <p class="text-sm sm:text-base text-blue-800 break-words">
                    <strong>üí° Pro Tip:</strong> Use events (Action) to notify components when state changes so they can
                    update their UI!
                </p>
            </div>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üîß Register Service in Program.cs
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                Register the state service with a Scoped lifetime so each user gets their own instance during a session.
            </p>

            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">üß© Code Example: Program.cs registration</h3>
            <ul class="list-disc pl-5 text-sm sm:text-base text-gray-700 space-y-1 mb-4">
                <li>Register AppState as Scoped so each circuit gets its own instance</li>
            </ul>
            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto break-all mb-4">
                <pre data-code-title="Program.cs registration">
// Program.cs
using BlazorMock.Services;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddRazorComponents()
    .AddInteractiveServerComponents();

// Register AppState as a SCOPED service
// Scoped = one instance per user session
builder.Services.AddScoped&lt;AppState&gt;();

var app = builder.Build();
                </pre>
            </div>

            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-4">
                <div class="bg-blue-50 p-4 rounded-lg border border-blue-100">
                    <h3 class="font-semibold text-blue-900 mb-2 text-sm sm:text-base break-words">
                        Scoped
                    </h3>
                    <p class="text-xs sm:text-sm text-blue-800 break-words">
                        One instance per user/circuit. Perfect for user-specific state.
                    </p>
                </div>
                <div class="bg-green-50 p-4 rounded-lg border border-green-100">
                    <h3 class="font-semibold text-green-900 mb-2 text-sm sm:text-base break-words">
                        Singleton
                    </h3>
                    <p class="text-xs sm:text-sm text-green-800 break-words">
                        One instance for entire app. Shared across ALL users.
                    </p>
                </div>
                <div class="bg-purple-50 p-4 rounded-lg border border-purple-100">
                    <h3 class="font-semibold text-purple-900 mb-2 text-sm sm:text-base break-words">
                        Transient
                    </h3>
                    <p class="text-xs sm:text-sm text-purple-800 break-words">
                        New instance every time injected. Rarely used in Blazor.
                    </p>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üìù Use State in Components
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                Inject the state service, subscribe to changes in <code
                    class="bg-gray-200 px-1 rounded">OnInitialized</code>, and update state via service methods.
            </p>

            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">üß© Code Example: DriverList.razor</h3>
            <ul class="list-disc pl-5 text-sm sm:text-base text-gray-700 space-y-1 mb-4">
                <li>Subscribe to state changes and update selection via the service</li>
            </ul>
            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto break-all mb-4">
                <pre data-code-title="Razor + C# (DriverList.razor)">
// DriverList.razor
@@page "/drivers"
@@inject AppState AppState
@@implements IDisposable

&lt;h1&gt;Select a Driver&lt;/h1&gt;

@@foreach (var driver in drivers)
{
    &lt;div class="driver-card @@GetSelectedClass(driver)"
         @@onclick="() =&gt; SelectDriver(driver)"&gt;
        &lt;h3&gt;@@driver.Name&lt;/h3&gt;
        &lt;p&gt;@@driver.LicenseLevel&lt;/p&gt;
    &lt;/div&gt;
}

@@code {
    private List&lt;Driver&gt; drivers = new();

    protected override void OnInitialized()
    {
        // Subscribe to state changes
        AppState.OnChange += StateHasChanged;
    }

    private void SelectDriver(Driver driver)
    {
        // Update the global state
        AppState.SelectDriver(driver);
    }

    private string GetSelectedClass(Driver driver)
    {
        return driver.Id == AppState.SelectedDriver?.Id 
            ? "selected" 
            : "";
    }

    // Clean up subscription when component is disposed
    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }
}
                </pre>
            </div>

            <div class="bg-yellow-50 border-l-4 border-yellow-500 p-4">
                <p class="text-sm sm:text-base text-yellow-800 break-words">
                    <strong>‚ö†Ô∏è Important:</strong> Always implement IDisposable and unsubscribe from events to prevent
                    memory leaks!
                </p>
            </div>
        </div>

        <!-- Live Demo: Shared State (AppState) -->
        <div class="bg-black/3 rounded-2xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">üé¨ Live Demo: Shared State
                (AppState)</h2>

            <div class="bg-white rounded-xl p-4 border border-gray-200">
                <div class="grid sm:grid-cols-2 gap-3 mb-4">
                    <BlazorMock.Components.Pages.Examples.Step10.DriverPicker />
                    <BlazorMock.Components.Pages.Examples.Step10.SelectedDriverCard />
                </div>
                <div class="text-xs sm:text-sm text-gray-500">Tip: This mirrors how two separate components can react to
                    the same shared state via a scoped service.</div>
            </div>
        </div>

        <!-- Source Code: Demo Components -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üß© Demo Components Source
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                These are the two small components powering the live demo above. Feel free to copy and reuse.
            </p>

            <!-- DriverPicker.razor -->
            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">üß© Code Example: DriverPicker.razor</h3>
            <ul class="list-disc pl-5 text-sm sm:text-base text-gray-700 space-y-1 mb-4">
                <li>Populate options from the database using a DbContextFactory</li>
                <li>Update shared state when the selection changes</li>
            </ul>
            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto break-all mb-4">
                <pre data-code-title="Razor (Components/Pages/Examples/Step10/DriverPicker.razor)">
@@using BlazorMock.Data
@@using Microsoft.EntityFrameworkCore
@@inject Microsoft.EntityFrameworkCore.IDbContextFactory&lt;AppDbContext&gt; DbFactory
@@inject AppState AppState

&lt;div class=&quot;bg-white rounded-lg border border-gray-200 p-3&quot;&gt;
    &lt;label class=&quot;block text-xs text-gray-600 mb-1&quot;&gt;Select Driver&lt;/label&gt;
    &lt;select class=&quot;w-full rounded border border-gray-300 p-2 text-sm&quot; @@onchange=&quot;OnChanged&quot;&gt;
        &lt;option value=&quot;&quot;&gt;-- Choose --&lt;/option&gt;
        @@foreach (var d in _drivers)
        {
            &lt;option value=&quot;@@d.Id&quot;&gt;@@d.Name (@@d.LicenseLevel)&lt;/option&gt;
        }
    &lt;/select&gt;
    @@if (!_drivers.Any())
    {
        &lt;div class=&quot;mt-2 text-[11px] text-gray-500&quot;&gt;No drivers found in database.&lt;/div&gt;
    }
&lt;/div&gt;

@@code {
    private List&lt;Driver&gt; _drivers = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await using var db = await DbFactory.CreateDbContextAsync();
            _drivers = await db.Drivers
                .OrderBy(d =&gt; d.Name)
                .ToListAsync();
        }
        catch
        {
            _drivers = new();
        }
    }

    private void OnChanged(ChangeEventArgs e)
    {
        if (int.TryParse(Convert.ToString(e.Value), out var id))
        {
            var driver = _drivers.FirstOrDefault(x =&gt; x.Id == id);
            AppState.SelectDriver(driver);
        }
        else
        {
            AppState.ClearSelection();
        }
    }
}
                </pre>
            </div>

            <!-- SelectedDriverCard.razor -->
            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">üß© Code Example: SelectedDriverCard.razor</h3>
            <ul class="list-disc pl-5 text-sm sm:text-base text-gray-700 space-y-1 mb-4">
                <li>Display the current selection and provide a Clear action</li>
            </ul>
            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto break-all">
                <pre data-code-title="Razor (Components/Pages/Examples/Step10/SelectedDriverCard.razor)">
@@inject AppState AppState
@@implements IDisposable

&lt;div class=&quot;bg-white rounded-lg border border-gray-200 p-3&quot;&gt;
    &lt;div class=&quot;text-xs text-gray-600 mb-1&quot;&gt;Current Selection&lt;/div&gt;
    @@if (AppState.SelectedDriver is null)
    {
        &lt;div class=&quot;text-xs sm:text-sm text-gray-700&quot;&gt;No driver selected&lt;/div&gt;
    }
    else
    {
        &lt;div class=&quot;text-xs sm:text-sm text-gray-900&quot;&gt;
            &lt;strong&gt;@@AppState.SelectedDriver.Name&lt;/strong&gt;
            ¬∑ @@AppState.SelectedDriver.LicenseLevel
            ¬∑ @@AppState.SelectedDriver.YearsOfExperience yrs
        &lt;/div&gt;
        &lt;div class=&quot;mt-2&quot;&gt;
            &lt;button class=&quot;px-3 py-1.5 rounded border border-gray-300 hover:bg-gray-50 text-xs sm:text-sm&quot; @@onclick=&quot;Clear&quot;&gt;Clear&lt;/button&gt;
        &lt;/div&gt;
    }
&lt;/div&gt;

@@code {
    protected override void OnInitialized()
    {
        AppState.OnChange += OnStateChanged;
    }

    private void OnStateChanged() =&gt; InvokeAsync(StateHasChanged);

    private void Clear() =&gt; AppState.ClearSelection();

    public void Dispose()
    {
        AppState.OnChange -= OnStateChanged;
    }
}
                </pre>
            </div>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üëÅÔ∏è Display State in Another Component
            </h2>
            <p class="text-sm sm:text-base lg:text-lg text-gray-700 mb-4 break-words">
                Any component can read the same state and react to updates. Remember to unsubscribe in <code
                    class="bg-gray-200 px-1 rounded">Dispose</code>.
            </p>

            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">üß© Code Example: DriverDetails.razor</h3>
            <ul class="list-disc pl-5 text-sm sm:text-base text-gray-700 space-y-1 mb-4">
                <li>Read state from the service and unsubscribe on dispose</li>
            </ul>
            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto break-all mb-4">
                <pre data-code-title="Razor + C# (DriverDetails.razor)">
// DriverDetails.razor
@@inject AppState AppState
@@implements IDisposable

&lt;div class="driver-details"&gt;
    @@if (AppState.SelectedDriver != null)
    {
        &lt;h2&gt;Selected Driver&lt;/h2&gt;
        &lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; @@AppState.SelectedDriver.Name&lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;License:&lt;/strong&gt; @@AppState.SelectedDriver.LicenseLevel&lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Experience:&lt;/strong&gt; @@AppState.SelectedDriver.YearsOfExperience years&lt;/p&gt;
        
        &lt;button @@onclick="ClearSelection"&gt;Clear Selection&lt;/button&gt;
    }
    else
    {
        &lt;p&gt;No driver selected&lt;/p&gt;
    }
&lt;/div&gt;

@@code {
    protected override void OnInitialized()
    {
        // Subscribe to state changes
        AppState.OnChange += StateHasChanged;
    }

    private void ClearSelection()
    {
        AppState.ClearSelection();
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }
}
                </pre>
            </div>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üîë Key Takeaways
            </h2>
            <ul class="space-y-3 text-sm sm:text-base lg:text-lg text-gray-700">
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">State services share data between components</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Use Scoped lifetime for per-user state</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Events (`Action`) notify components of changes</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Call `StateHasChanged()` to trigger UI updates</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Always dispose of event subscriptions</span>
                </li>
            </ul>
        </div>

        <div class="bg-white rounded-xl p-6 border-2 border-green-200">
            <div class="flex flex-col sm:flex-row items-center justify-between gap-4">
                <div class="min-w-0 flex-1">
                    <h3 class="text-lg sm:text-xl font-bold text-gray-900 mb-2 break-words">Ready to move on?</h3>
                    <p class="text-sm sm:text-base text-gray-600 break-words">Mark this step as complete to track your
                        progress!</p>
                </div>
                @if (isComplete)
                {
                    <div class="flex items-center gap-3">
                        <span class="px-4 py-2 rounded-full bg-green-100 text-green-700 font-medium">‚úì Completed</span>
                        <button @onclick="@(async () => await ProgressService.MarkStepIncompleteAsync(10))"
                            class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm">Reset</button>
                    </div>
                }
                else
                {
                    <button @onclick="MarkComplete"
                        class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors">Mark
                        as Complete</button>
                }
            </div>
        </div>

        <!-- Navigation -->
        <div class="mt-8 flex items-center justify-between">
            <a href="/examples/step9"
                class="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                <span>‚Üê</span>
                Previous: Step 9
            </a>
            <a href="/examples/step11"
                class="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                Next: Step 11
                <span>‚Üí</span>
            </a>
        </div>
    </div>
</div>

@code {
    private bool isComplete = false;
    [Inject] private AppState AppState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var step = await ProgressService.GetStepAsync(10);
        isComplete = step?.IsComplete ?? false;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AppState.OnChange += OnAppStateChanged;
        }
        return Task.CompletedTask;
    }

    private async Task MarkComplete()
    {
        await ProgressService.MarkStepCompleteAsync(10);
        isComplete = true;
    }

    public void Dispose()
    {
        AppState.OnChange -= OnAppStateChanged;
    }

    private void OnAppStateChanged() => InvokeAsync(StateHasChanged);
    private void ClearDemoSelection() => AppState.ClearSelection();
}