@using BlazorMock.Data
@using Microsoft.EntityFrameworkCore
@inject Microsoft.EntityFrameworkCore.IDbContextFactory<AppDbContext> DbFactory
@inject AppState AppState

<div class="bg-white rounded-lg border border-gray-200 p-3">
    <label class="block text-xs text-gray-600 mb-1">Select Driver</label>
    <select class="w-full rounded border border-gray-300 p-2 text-sm" @onchange="OnChanged">
        <option value="">-- Choose --</option>
        @foreach (var d in _drivers)
        {
            <option value="@d.Id">@d.Name (@d.LicenseLevel)</option>
        }
    </select>
    @if (!_drivers.Any())
    {
        <div class="mt-2 text-[11px] text-gray-500">No drivers found in database.</div>
    }
</div>

@code {
    private List<Driver> _drivers = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await using var db = await DbFactory.CreateDbContextAsync();
            _drivers = await db.Drivers
            .OrderBy(d => d.Name)
            .ToListAsync();
        }
        catch
        {
            _drivers = new();
        }
    }

    private void OnChanged(ChangeEventArgs e)
    {
        if (int.TryParse(Convert.ToString(e.Value), out var id))
        {
            var driver = _drivers.FirstOrDefault(x => x.Id == id);
            AppState.SelectDriver(driver);
        }
        else
        {
            AppState.ClearSelection();
        }
    }
}