@page "/examples/step2"
@inject ILearningProgressService ProgressService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Step 2: Razor Syntax & Display - Example</PageTitle>

<div class="min-h-screen py-8 rounded-4xl bg-gray-50">
    <div class="w-full mx-auto px-4 max-w-5xl">
        <!-- Header -->
        <div class="mb-8">
            <a href="/guide"
                class="inline-flex items-center gap-2 text-sm sm:text-base text-blue-600 hover:text-blue-700 mb-4">
                <span>‚Üê</span> Back to Guide
            </a>
            <h1 class="text-4xl font-bold text-gray-900 mb-4">
                üéØ Step 2: Razor Syntax & Display
            </h1>
            <p class="text-xl text-gray-600">
                Learn Razor syntax to combine HTML markup with C# code, use the @@page directive for routing, and
                display dynamic content.
            </p>
        </div>

        <!-- What You Learned -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">üìò What You'll Learn</h2>
            <p class="text-gray-700 mb-6">Razor syntax lets you seamlessly blend HTML and C# code. Use the &#64; symbol
                to access C# expressions directly in your markup.</p>

            <!-- (moved code sample into a dedicated card below, like Step 4) -->

            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 my-4">
                <p class="text-sm text-blue-800 font-semibold mb-2">üí° Key Points:</p>
                <ul class="text-sm text-blue-700 list-disc ml-5 space-y-1">
                    <li><code>&#64;page "/"</code> ‚Üí Defines the route URL for this component</li>
                    <li><code>&#64;DateTime.Now</code> ‚Üí Access C# code inline with &#64; symbol</li>
                    <li><code>.ToString("format")</code> ‚Üí Format dates and times</li>
                    <li>Razor mixes HTML and C# seamlessly</li>
                </ul>
            </div>

            <div class="mt-6 pt-6 border-t border-gray-200">
                <p class="text-sm text-gray-600 mb-3"><strong>üí° Key Concepts:</strong> &#64;page directive, Razor
                    syntax (&#64;), DateTime, ToString formatting</p>
                <div class="flex items-center gap-2">
                    <span class="text-sm text-gray-600">‚Üí Related tips:</span>
                    <a href="/tips#page-route"
                        class="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-xs font-medium hover:bg-blue-200 transition-colors">&#64;page
                        route</a>
                </div>
            </div>
        </div>

        <!-- Code Block & Summary (like Step 4) -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-3">üß© Code Example: Home Page</h2>
            <p class="text-sm sm:text-base text-gray-700 mb-3">
                This snippet shows how Razor mixes HTML and C#. The <code>&#64;page</code> directive sets the route, and
                inline expressions like <code>&#64;DateTime.Now</code> format values for display.
            </p>
            <ul class="list-disc ml-5 text-xs sm:text-sm text-gray-700 mb-4 space-y-1">
                <li>Use <code>&#64;page</code> to assign a URL to a component</li>
                <li>Render values inline with <code>&#64;{...}</code> or <code>&#64;Expression</code></li>
                <li>Use <code>.ToString("format")</code> to format dates/times</li>
            </ul>

            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto mb-2">
                <pre data-code-title="Razor (Home.razor)"
                    class="text-sm font-mono text-gray-800 w-full max-w-full overflow-x-auto">&#64;page "/"

&lt;PageTitle&gt;Home&lt;/PageTitle&gt;

&lt;div class=&quot;min-h-screen py-8 bg-gray-50&quot;&gt;
    &lt;div class=&quot;max-w-5xl mx-auto px-4&quot;&gt;
        &lt;h1 class=&quot;text-3xl font-bold text-gray-900 mb-6&quot;&gt;Welcome to Our App!&lt;/h1&gt;

        &lt;div class=&quot;bg-black/3 rounded-2xl p-6 mb-6&quot;&gt;
            &lt;h2 class=&quot;text-2xl font-semibold text-gray-800 mb-4&quot;&gt;üé¨ Live Demo&lt;/h2&gt;
            &lt;div class=&quot;grid md:grid-cols-2 gap-4&quot;&gt;
                &lt;div class=&quot;rounded-2xl p-5 bg-white border border-gray-200&quot;&gt;
                    &lt;div class=&quot;flex items-center justify-between mb-2&quot;&gt;
                        &lt;span class=&quot;inline-flex h-8 w-8 items-center justify-center rounded-full bg-orange-500 text-white text-sm&quot;&gt;üìÖ&lt;/span&gt;
                        &lt;span class=&quot;px-3 py-1 rounded-full border border-gray-200 text-gray-600 text-xs&quot;&gt;Today&lt;/span&gt;
                    &lt;/div&gt;
                    &lt;p class=&quot;text-sm text-gray-500 mb-1&quot;&gt;Current Date&lt;/p&gt;
                    &lt;p class=&quot;text-2xl font-semibold text-gray-900&quot;&gt;
                        &#64;DateTime.Now.ToString(&quot;dddd, MMMM dd, yyyy&quot;)
                    &lt;/p&gt;
                &lt;/div&gt;

                &lt;div class=&quot;rounded-2xl p-5 bg-white border border-gray-200&quot;&gt;
                    &lt;div class=&quot;flex items-center justify-between mb-2&quot;&gt;
                        &lt;span class=&quot;inline-flex h-8 w-8 items-center justify-center rounded-full bg-orange-500 text-white text-sm&quot;&gt;‚è∞&lt;/span&gt;
                        &lt;span class=&quot;px-3 py-1 rounded-full border border-gray-200 text-gray-600 text-xs&quot;&gt;Now&lt;/span&gt;
                    &lt;/div&gt;
                    &lt;p class=&quot;text-sm text-gray-500 mb-1&quot;&gt;Current Time&lt;/p&gt;
                    &lt;p class=&quot;text-2xl font-semibold text-gray-900&quot;&gt;
                        &#64;DateTime.Now.ToString(&quot;hh:mm tt&quot;)
                    &lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;p class=&quot;text-xs text-gray-600 mt-4 text-center&quot;&gt;üí° This updates automatically when you refresh the page!&lt;/p&gt;
        &lt;/div&gt; 
        
        &#64;* Insert GreetingCard component here *&#64;

    &lt;/div&gt;

&lt;/div&gt;</pre>
            </div>
        </div>

        <!-- How to do it -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">ÔøΩÔ∏è How to do it</h2>
            <ol class="list-decimal ml-5 space-y-2 text-gray-700">
                <li>Create or open <code>Components/Pages/Home.razor</code>.</li>
                <li>Paste the code from the ‚ÄúRazor (Home.razor)‚Äù block above. Ensure the first line is
                    <code>&#64;page "/"</code>.
                </li>
                <li>Build and run the app, then go to <code>/</code> to see date/time rendering.</li>
            </ol>
            <div class="mt-4 bg-blue-50 border border-blue-200 rounded-lg p-3 text-sm text-blue-800">
                Tip: Use <code>&#64;DateTime.Now.ToString("format")</code> to customize how values appear.
            </div>
        </div>

        <!-- Live Demo -->
        <div class="bg-black/3 rounded-2xl p-6 mb-6">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">üé¨ Live Demo</h2>
            <div class="grid md:grid-cols-2 gap-4">
                <div class="rounded-2xl p-5 bg-white border border-gray-200">
                    <div class="flex items-center justify-between mb-2">
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-orange-500 text-white text-sm">üìÖ</span>
                        <span class="px-3 py-1 rounded-full border border-gray-200 text-gray-600 text-xs">Today</span>
                    </div>
                    <p class="text-sm text-gray-500 mb-1">Current Date</p>
                    <p class="text-2xl font-semibold text-gray-900">
                        @DateTime.Now.ToString("dddd, MMMM dd, yyyy")
                    </p>
                </div>
                <div class="rounded-2xl p-5 bg-white border border-gray-200">
                    <div class="flex items-center justify-between mb-2">
                        <span
                            class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-orange-500 text-white text-sm">‚è∞</span>
                        <span class="px-3 py-1 rounded-full border border-gray-200 text-gray-600 text-xs">Now</span>
                    </div>
                    <p class="text-sm text-gray-500 mb-1">Current Time</p>
                    <p class="text-2xl font-semibold text-gray-900">
                        @DateTime.Now.ToString("hh:mm tt")
                    </p>
                </div>
            </div>
            <p class="text-xs text-gray-600 mt-4 text-center">üí° This updates automatically when you refresh the page!
            </p>
        </div>

        <!-- Mark Complete Section -->
        <div class="bg-white rounded-xl p-6 border-2 border-green-200 mb-6">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                <div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-1">Ready to move on?</h3>
                    <p class="text-sm text-gray-600">Mark this step as complete to track your progress.</p>
                </div>
                @if (isComplete)
                {
                    <div class="flex items-center gap-3">
                        <span class="px-4 py-2 rounded-full bg-green-100 text-green-700 font-medium">‚úì Completed</span>
                        <button @onclick="ResetStep"
                            class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm">Reset</button>
                    </div>
                }
                else
                {
                    <button @onclick="MarkComplete"
                        class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors">
                        Mark as Complete
                    </button>
                }
            </div>
        </div>

        <!-- Navigation -->
        <div class="flex items-center justify-between">
            <a href="/examples/step1"
                class="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                <span>‚Üê</span>
                Previous: Step 1
            </a>
            <a href="/examples/step3"
                class="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                Next: Step 3
                <span>‚Üí</span>
            </a>
        </div>
    </div>
</div>

@code {
    private bool isComplete;
    private IJSObjectReference? _copyModule;

    protected override async Task OnInitializedAsync()
    {
        var step = await ProgressService.GetStepAsync(2);
        isComplete = step?.IsComplete ?? false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _copyModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/codeblocks.js");
                await _copyModule.InvokeVoidAsync("enhancePreBlocks");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to load code block enhancer: {ex.Message}");
            }
        }
    }

    private async Task MarkComplete()
    {
        await ProgressService.MarkStepCompleteAsync(2);
        isComplete = true;
    }

    private async Task ResetStep()
    {
        await ProgressService.MarkStepIncompleteAsync(2);
        isComplete = false;
    }

    public void Dispose()
    {
        _copyModule?.DisposeAsync();
    }
}