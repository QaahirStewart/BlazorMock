@page "/examples/step2"
@inject ILearningProgressService ProgressService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Step 2: Razor Syntax & Display - Example</PageTitle>

<div class="min-h-screen py-8 bg-gray-50">
    <div class="w-full mx-auto px-4 max-w-5xl">
        <!-- Header -->
        <div class="mb-8">
            <a href="/" class="inline-flex items-center gap-2 text-blue-600 hover:text-blue-700 mb-4">
                <span>←</span> Back to Home
            </a>
            <h1 class="text-4xl font-bold text-gray-900 mb-4">
                🎯 Step 2: Razor Syntax & Display
            </h1>
            <p class="text-xl text-gray-600">
                Learn Razor syntax to combine HTML markup with C# code, use the @@page directive for routing, and display dynamic content.
            </p>
        </div>

        <!-- What You Learned -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">📘 What You'll Learn</h2>
            <p class="text-gray-700 mb-6">Razor syntax lets you seamlessly blend HTML and C# code. Use the &#64; symbol to access C# expressions directly in your markup.</p>
            
            <h3 class="text-lg font-semibold text-gray-700 mb-3">Code Example - Home.razor:</h3>
            <pre class="bg-gray-100 p-4 rounded text-sm font-mono text-gray-800 w-full max-w-full overflow-x-auto mb-4">&#64;page "/"

&lt;PageTitle&gt;Home&lt;/PageTitle&gt;

&lt;div class="container"&gt;
    &lt;h1&gt;Welcome to Our App!&lt;/h1&gt;
    
    &lt;div class="date-time-display"&gt;
        &lt;p&gt;📅 Today is: &#64;DateTime.Now.ToString("dddd, MMMM dd, yyyy")&lt;/p&gt;
        &lt;p&gt;⏰ Current time: &#64;DateTime.Now.ToString("hh:mm:ss tt")&lt;/p&gt;
    &lt;/div&gt;
    
    &lt;p&gt;The year is: &#64;DateTime.Now.Year&lt;/p&gt;
&lt;/div&gt;</pre>
            
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                <p class="text-sm text-blue-800 font-semibold mb-2">💡 Key Points:</p>
                <ul class="text-sm text-blue-700 list-disc ml-5 space-y-1">
                    <li><code>&#64;page "/"</code> → Defines the route URL for this component</li>
                    <li><code>&#64;DateTime.Now</code> → Access C# code inline with &#64; symbol</li>
                    <li><code>.ToString("format")</code> → Format dates and times</li>
                    <li>Razor mixes HTML and C# seamlessly</li>
                </ul>
            </div>
            
            <div class="mt-6 pt-6 border-t border-gray-200">
                <p class="text-sm text-gray-600 mb-3"><strong>💡 Key Concepts:</strong> &#64;page directive, Razor syntax (&#64;), DateTime, ToString formatting</p>
                <div class="flex items-center gap-2">
                    <span class="text-sm text-gray-600">→ Related tips:</span>
                    <a href="/tips#page-route" class="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-xs font-medium hover:bg-blue-200 transition-colors">&#64;page route</a>
                </div>
            </div>
        </div>

        <!-- Live Demo -->
        <div class="bg-black/3 rounded-2xl p-6 mb-6">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">🎬 Live Demo</h2>
            <div class="grid md:grid-cols-2 gap-4">
                <div class="rounded-2xl p-5 bg-white border border-gray-200">
                    <div class="flex items-center justify-between mb-2">
                        <span class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-orange-500 text-white text-sm">📅</span>
                        <span class="px-3 py-1 rounded-full border border-gray-200 text-gray-600 text-xs">Today</span>
                    </div>
                    <p class="text-sm text-gray-500 mb-1">Current Date</p>
                    <p class="text-2xl font-semibold text-gray-900">
                        @DateTime.Now.ToString("dddd, MMMM dd, yyyy")
                    </p>
                </div>
                <div class="rounded-2xl p-5 bg-white border border-gray-200">
                    <div class="flex items-center justify-between mb-2">
                        <span class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-orange-500 text-white text-sm">⏰</span>
                        <span class="px-3 py-1 rounded-full border border-gray-200 text-gray-600 text-xs">Now</span>
                    </div>
                    <p class="text-sm text-gray-500 mb-1">Current Time</p>
                    <p class="text-2xl font-semibold text-gray-900">
                        @DateTime.Now.ToString("hh:mm tt")
                    </p>
                </div>
            </div>
            <p class="text-xs text-gray-600 mt-4 text-center">💡 This updates automatically when you refresh the page!</p>
        </div>

        <!-- Mark Complete Section -->
        <div class="bg-white rounded-xl p-6 border-2 border-green-200 mb-6">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                <div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-1">Ready to move on?</h3>
                    <p class="text-sm text-gray-600">Mark this step as complete to track your progress.</p>
                </div>
                @if (isComplete)
                {
                    <div class="flex items-center gap-3">
                        <span class="px-4 py-2 rounded-full bg-green-100 text-green-700 font-medium">✓ Completed</span>
                        <button @onclick="ResetStep" class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm">Reset</button>
                    </div>
                }
                else
                {
                    <button @onclick="MarkComplete" class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors">
                        Mark as Complete
                    </button>
                }
            </div>
        </div>

        <!-- Navigation -->
        <div class="flex items-center justify-between">
            <a href="/examples/step1" class="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                <span>←</span>
                Previous: Step 1
            </a>
            <a href="/examples/step3" class="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                Next: Step 3
                <span>→</span>
            </a>
        </div>
    </div>
</div>

@code {
    private bool isComplete;

    protected override async Task OnInitializedAsync()
    {
        var step = await ProgressService.GetStepAsync(2);
        isComplete = step?.IsComplete ?? false;
    }

    private async Task MarkComplete()
    {
        await ProgressService.MarkStepCompleteAsync(2);
        isComplete = true;
    }

    private async Task ResetStep()
    {
        await ProgressService.MarkStepIncompleteAsync(2);
        isComplete = false;
    }
}
