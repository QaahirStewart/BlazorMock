@page "/examples/step13"
@inject ILearningProgressService ProgressService
@inject IJSRuntime JS
@implements IAsyncDisposable
@rendermode InteractiveServer

<div class="min-h-screen py-8 rounded-4xl bg-gray-50">
    <div class="w-full mx-auto px-4 max-w-6xl">
        <div class="mb-8">
            <a href="/guide" class="inline-flex items-center gap-2 text-blue-600 hover:text-blue-700 mb-4">
                <span>‚Üê</span> Back to Guide
            </a>
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-4">
                <div class="min-w-0 flex-1">
                    <h1 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-2 break-words">üéØ Step 13: Dashboard &
                        Reports</h1>
                    <p class="text-base sm:text-lg md:text-xl text-gray-600 leading-relaxed break-words">Build a
                        dashboard to visualize routes, drivers, and financials.</p>
                </div>

            </div>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üéØ Learning Objectives
            </h2>
            <ul class="space-y-2 text-sm sm:text-base lg:text-lg text-gray-700">
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Display summary statistics and KPIs</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Filter and sort data dynamically</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Use conditional styling for status indicators</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Aggregate data with LINQ queries</span>
                </li>
            </ul>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üìä Dashboard Component
            </h2>
            <p class="text-sm sm:text-base text-gray-700 mb-3">This is the Razor markup that lays out the dashboard UI: KPI cards, a routes table with filters, driver availability tiles, and a financial summary section.</p>
            <ul class="list-disc ml-5 text-xs sm:text-sm text-gray-700 mb-4 space-y-1">
                <li>Decomposes the page into readable sections with accessible headings</li>
                <li>Uses semantic classes for status badges and grids for responsive layout</li>
                <li>Keeps the view clean while business logic stays in the code-behind</li>
            </ul>

            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto mb-4">
                <details class="group">
                    <summary class="inline-flex items-center gap-2 px-3 py-1.5 rounded border border-gray-300 bg-white text-xs sm:text-sm cursor-pointer select-none">
                        Show code
                        <span class="text-gray-500 group-open:hidden">(click to expand)</span>
                        <span class="text-gray-500 hidden group-open:inline">(click to collapse)</span>
                    </summary>
                    <div class="relative mt-3">
                        <button class="absolute top-2 right-2 px-3 py-1.5 rounded border border-gray-300 bg-white hover:bg-gray-50 text-xs sm:text-sm"
                                @onclick="CopyCompCode">Copy</button>
                        <pre id="code-comp-pre" class="text-xs sm:text-sm text-gray-800 font-mono"><code>@@page "/dashboard"
@@inject AppDbContext DbContext
@@using Microsoft.EntityFrameworkCore
@@rendermode InteractiveServer

&lt;div class="dashboard-container"&gt;
    &lt;h1&gt;üìä Trucking Dashboard&lt;/h1&gt;

    &lt;!-- KPI Cards --&gt;
    &lt;div class="kpi-grid"&gt;
        &lt;div class="kpi-card bg-blue-50 border-blue-500"&gt;
            &lt;div class="kpi-label"&gt;Active Routes&lt;/div&gt;
            &lt;div class="kpi-value"&gt;@@stats.ActiveRoutes&lt;/div&gt;
            &lt;div class="kpi-change"&gt;@@stats.RouteChangePercent% from last month&lt;/div&gt;
        &lt;/div&gt;

        &lt;div class="kpi-card bg-green-50 border-green-500"&gt;
            &lt;div class="kpi-label"&gt;Available Drivers&lt;/div&gt;
            &lt;div class="kpi-value"&gt;@@stats.AvailableDrivers&lt;/div&gt;
            &lt;div class="kpi-change"&gt;Out of @@stats.TotalDrivers total&lt;/div&gt;
        &lt;/div&gt;

        &lt;div class="kpi-card bg-purple-50 border-purple-500"&gt;
            &lt;div class="kpi-label"&gt;Available Trucks&lt;/div&gt;
            &lt;div class="kpi-value"&gt;@@stats.AvailableTrucks&lt;/div&gt;
            &lt;div class="kpi-change"&gt;@@stats.TrucksInMaintenance in maintenance&lt;/div&gt;
        &lt;/div&gt;

        &lt;div class="kpi-card bg-yellow-50 border-yellow-500"&gt;
            &lt;div class="kpi-label"&gt;Monthly Revenue&lt;/div&gt;
            &lt;div class="kpi-value"&gt;$@@stats.MonthlyRevenue.ToString("N0")&lt;/div&gt;
            &lt;div class="kpi-change @@GetProfitClass(stats.ProfitMargin)"&gt;
                @@stats.ProfitMargin.ToString("N1")% profit margin
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;!-- Active Routes Table --&gt;
    &lt;div class="dashboard-section"&gt;
        &lt;div class="section-header"&gt;
            &lt;h2&gt;üöö Active Routes&lt;/h2&gt;
            &lt;select @@bind="routeFilter" @@bind:after="LoadData"&gt;
                &lt;option value="all"&gt;All Routes&lt;/option&gt;
                &lt;option value="scheduled"&gt;Scheduled&lt;/option&gt;
                &lt;option value="inprogress"&gt;In Progress&lt;/option&gt;
                &lt;option value="delayed"&gt;Delayed&lt;/option&gt;
            &lt;/select&gt;
        &lt;/div&gt;

        &lt;table class="dashboard-table"&gt;
            &lt;thead&gt;
                &lt;tr&gt;
                    &lt;th&gt;Route #&lt;/th&gt;
                    &lt;th&gt;Driver&lt;/th&gt;
                    &lt;th&gt;Origin ‚Üí Destination&lt;/th&gt;
                    &lt;th&gt;Distance&lt;/th&gt;
                    &lt;th&gt;Status&lt;/th&gt;
                    &lt;th&gt;Revenue&lt;/th&gt;
                &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
                @@foreach (var route in GetFilteredRoutes())
                {
                    &lt;tr&gt;
                        &lt;td&gt;@@route.RouteNumber&lt;/td&gt;
                        &lt;td&gt;@@route.Driver.Name&lt;/td&gt;
                        &lt;td&gt;@@route.Origin ‚Üí @@route.Destination&lt;/td&gt;
                        &lt;td&gt;@@route.DistanceMiles mi&lt;/td&gt;
                        &lt;td&gt;
                            &lt;span class="status-badge @@GetStatusClass(route.Status)"&gt;
                                @@route.Status
                            &lt;/span&gt;
                        &lt;/td&gt;
                        &lt;td&gt;$@@route.Revenue.ToString("N2")&lt;/td&gt;
                    &lt;/tr&gt;
                }
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;

    &lt;!-- Driver Availability --&gt;
    &lt;div class="dashboard-section"&gt;
        &lt;h2&gt;üë• Driver Status&lt;/h2&gt;
        &lt;div class="driver-grid"&gt;
            @@foreach (var driver in drivers.Take(8))
            {
                &lt;div class="driver-card @@(driver.IsAvailable ? "available" : "unavailable")"&gt;
                    &lt;div class="driver-name"&gt;@@driver.Name&lt;/div&gt;
                    &lt;div class="driver-license"&gt;@@driver.LicenseLevel&lt;/div&gt;
                    &lt;div class="driver-status"&gt;
                        @@(driver.IsAvailable ? "‚úì Available" : "‚ö† On Route")
                    &lt;/div&gt;
                &lt;/div&gt;
            }
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;!-- Financial Summary --&gt;
    &lt;div class="dashboard-section"&gt;
        &lt;h2&gt;üí∞ Financial Summary&lt;/h2&gt;
        &lt;div class="financial-grid"&gt;
            &lt;div class="financial-row"&gt;
                &lt;span&gt;Total Revenue (This Month):&lt;/span&gt;
                &lt;span class="amount positive"&gt;$@@stats.MonthlyRevenue.ToString("N2")&lt;/span&gt;
            &lt;/div&gt;
            &lt;div class="financial-row"&gt;
                &lt;span&gt;Total Driver Pay:&lt;/span&gt;
                &lt;span class="amount"&gt;$@@stats.TotalDriverPay.ToString("N2")&lt;/span&gt;
            &lt;/div&gt;
            &lt;div class="financial-row"&gt;
                &lt;span&gt;Total Fuel Costs:&lt;/span&gt;
                &lt;span class="amount"&gt;$@@stats.TotalFuelCost.ToString("N2")&lt;/span&gt;
            &lt;/div&gt;
            &lt;div class="financial-row"&gt;
                &lt;span&gt;Other Expenses:&lt;/span&gt;
                &lt;span class="amount"&gt;$@@stats.OtherExpenses.ToString("N2")&lt;/span&gt;
            &lt;/div&gt;
            &lt;div class="financial-row total"&gt;
                &lt;span&gt;Net Profit:&lt;/span&gt;
                &lt;span class="amount @@(stats.NetProfit &gt; 0 ? "positive" : "negative")"&gt;
                    $@@stats.NetProfit.ToString("N2")
                &lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</code></pre>
                    </div>
                </details>
            </div>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üßÆ Dashboard Logic
            </h2>
            <p class="text-sm sm:text-base text-gray-700 mb-3">This is the C# code-behind that loads data and computes metrics. It uses EF Core to load entities and LINQ to aggregate totals for the KPI cards.</p>
            <ul class="list-disc ml-5 text-xs sm:text-sm text-gray-700 mb-4 space-y-1">
                <li>Separates concerns: data access and calculations live here, not in the view</li>
                <li>Uses Include() to eagerly load related data efficiently</li>
                <li>Applies LINQ for aggregation (Sum, Count, Where) and in-memory filtering</li>
            </ul>

            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto mb-4">
                <details class="group">
                    <summary class="inline-flex items-center gap-2 px-3 py-1.5 rounded border border-gray-300 bg-white text-xs sm:text-sm cursor-pointer select-none">
                        Show code
                        <span class="text-gray-500 group-open:hidden">(click to expand)</span>
                        <span class="text-gray-500 hidden group-open:inline">(click to collapse)</span>
                    </summary>
                    <div class="relative mt-3">
                        <button class="absolute top-2 right-2 px-3 py-1.5 rounded border border-gray-300 bg-white hover:bg-gray-50 text-xs sm:text-sm"
                                @onclick="CopyLogicCode">Copy</button>
                        <pre id="code-logic-pre" class="text-xs sm:text-sm text-gray-800 font-mono"><code>@@code {
    private List&lt;Route&gt; routes = new();
    private List&lt;Driver&gt; drivers = new();
    private DashboardStats stats = new();
    private string routeFilter = "all";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        // Load routes with related data
        routes = await DbContext.Routes
            .Include(r =&gt; r.Driver)
            .Include(r =&gt; r.Truck)
            .Where(r =&gt; r.Status == RouteStatus.Scheduled || 
                        r =&gt; r.Status == RouteStatus.InProgress)
            .OrderBy(r =&gt; r.ScheduledStartDate)
            .ToListAsync();

        // Load all drivers
        drivers = await DbContext.Drivers
            .OrderBy(d =&gt; d.Name)
            .ToListAsync();

        // Calculate statistics
        await CalculateStats();
    }

    private async Task CalculateStats()
    {
        var startOfMonth = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);

        // Get routes for current month
        var monthlyRoutes = await DbContext.Routes
            .Where(r =&gt; r.ScheduledStartDate &gt;= startOfMonth)
            .ToListAsync();

        stats = new DashboardStats
        {
            ActiveRoutes = routes.Count(r =&gt; r.Status == RouteStatus.InProgress),
            AvailableDrivers = await DbContext.Drivers.CountAsync(d =&gt; d.IsAvailable),
            TotalDrivers = await DbContext.Drivers.CountAsync(),
            AvailableTrucks = await DbContext.Trucks.CountAsync(t =&gt; t.IsAvailable),
            TrucksInMaintenance = await DbContext.Trucks.CountAsync(t =&gt; t.InMaintenance),
            
            // Financial calculations
            MonthlyRevenue = monthlyRoutes.Sum(r =&gt; r.Revenue),
            TotalDriverPay = monthlyRoutes.Sum(r =&gt; r.DriverPay),
            TotalFuelCost = monthlyRoutes.Sum(r =&gt; r.EstimatedFuelCost),
            OtherExpenses = monthlyRoutes.Count * 150m // Estimated $150 per route
        };

        // Calculate net profit
        stats.NetProfit = stats.MonthlyRevenue - 
                         (stats.TotalDriverPay + stats.TotalFuelCost + stats.OtherExpenses);

        // Calculate profit margin percentage
        if (stats.MonthlyRevenue &gt; 0)
        {
            stats.ProfitMargin = (stats.NetProfit / stats.MonthlyRevenue) * 100;
        }
    }

    private IEnumerable&lt;Route&gt; GetFilteredRoutes()
    {
        return routeFilter switch
        {
            "scheduled" =&gt; routes.Where(r =&gt; r.Status == RouteStatus.Scheduled),
            "inprogress" =&gt; routes.Where(r =&gt; r.Status == RouteStatus.InProgress),
            "delayed" =&gt; routes.Where(r =&gt; r.Status == RouteStatus.Delayed),
            _ =&gt; routes
        };
    }

    private string GetStatusClass(RouteStatus status)
    {
        return status switch
        {
            RouteStatus.Scheduled =&gt; "status-scheduled",   // Blue
            RouteStatus.InProgress =&gt; "status-active",     // Green
            RouteStatus.Completed =&gt; "status-completed",   // Gray
            RouteStatus.Delayed =&gt; "status-delayed",       // Red
            RouteStatus.Cancelled =&gt; "status-cancelled",   // Red
            _ =&gt; ""
        };
    }

    private string GetProfitClass(decimal margin)
    {
        return margin switch
        {
            &gt;= 20 =&gt; "profit-excellent",  // Green
            &gt;= 10 =&gt; "profit-good",       // Yellow
            _ =&gt; "profit-poor"             // Red
        };
    }
}

// Helper class for dashboard statistics
public class DashboardStats
{
    public int ActiveRoutes { get; set; }
    public int AvailableDrivers { get; set; }
    public int TotalDrivers { get; set; }
    public int AvailableTrucks { get; set; }
    public int TrucksInMaintenance { get; set; }
    public decimal MonthlyRevenue { get; set; }
    public decimal TotalDriverPay { get; set; }
    public decimal TotalFuelCost { get; set; }
    public decimal OtherExpenses { get; set; }
    public decimal NetProfit { get; set; }
    public decimal ProfitMargin { get; set; }
    public decimal RouteChangePercent { get; set; }
}</code></pre>
                    </div>
                </details>
            </div>

            <div class="bg-blue-50 border-l-4 border-blue-500 p-4">
                <p class="text-sm sm:text-base text-blue-800 break-words">
                    <strong>üí° Pro Tip:</strong> Use LINQ methods like Sum(), Count(), and Where() to aggregate data
                    efficiently!
                </p>
            </div>
        </div>

        <!-- Live Demo: Mini Dashboard -->
        <div class="bg-black/3 rounded-2xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">üé¨ Live Demo: Mini Dashboard</h2>

            <div class="bg-white rounded-xl p-4 border border-gray-200">
                <!-- Controls -->
                <div class="grid sm:grid-cols-3 gap-3 mb-4">
                    <div>
                        <label class="block text-xs text-gray-600 mb-1">Customer Rate per Mile</label>
                        <InputNumber @bind-Value="s13CustomerRatePerMile" step="0.01" class="w-full rounded border border-gray-300 p-2" />
                    </div>
                    <div class="flex items-end">
                        <button class="px-3 py-1.5 rounded bg-blue-600 hover:bg-blue-700 text-white text-xs sm:text-sm" @onclick="RecomputeS13">Recalculate</button>
                    </div>
                </div>

                <!-- KPI cards -->
                <div class="grid sm:grid-cols-4 gap-3 mb-4">
                    <div class="rounded border p-3">
                        <div class="text-xs text-gray-500">Total Miles</div>
                        <div class="text-xl font-semibold">@s13Totals.TotalMiles</div>
                    </div>
                    <div class="rounded border p-3">
                        <div class="text-xs text-gray-500">Revenue</div>
                        <div class="text-xl font-semibold">@s13Totals.Revenue.ToString("C")</div>
                    </div>
                    <div class="rounded border p-3">
                        <div class="text-xs text-gray-500">Cost (Pay + Expenses)</div>
                        <div class="text-xl font-semibold">@s13Totals.Cost.ToString("C")</div>
                    </div>
                    <div class="rounded border p-3">
                        <div class="text-xs text-gray-500">Profit</div>
                        <div class="text-xl font-semibold">@s13Totals.Profit.ToString("C")</div>
                    </div>
                </div>

                <!-- Profit by Driver bars -->
                <div class="space-y-3">
                    @foreach (var row in s13DriverSummaries)
                    {
                        var width = s13MaxProfit <= 0 ? 0 : (row.Profit / s13MaxProfit) * 100m;
                        <div class="space-y-1">
                            <div class="flex items-center justify-between text-xs sm:text-sm">
                                <div class="font-medium">@row.Driver</div>
                                <div class="text-gray-600">Rev @row.Revenue.ToString("C") ¬∑ Cost @row.Cost.ToString("C") ¬∑ Profit <span class="font-medium">@row.Profit.ToString("C")</span></div>
                            </div>
                            <div class="h-3 w-full rounded bg-gray-200 overflow-hidden">
                                <div class="h-full bg-blue-600" style="width:@width%"></div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üé® Dashboard Styling
            </h2>
            <p class="text-sm sm:text-base text-gray-700 mb-3">These styles provide a consistent visual language for KPI cards, route statuses, and driver tiles. They improve readability and make the dashboard scannable.</p>
            <ul class="list-disc ml-5 text-xs sm:text-sm text-gray-700 mb-4 space-y-1">
                <li>Grid layouts adapt to different screen sizes</li>
                <li>Status badges communicate state through color</li>
                <li>Class names group styles by component and purpose</li>
            </ul>

            <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto mb-4">
                <details class="group">
                    <summary class="inline-flex items-center gap-2 px-3 py-1.5 rounded border border-gray-300 bg-white text-xs sm:text-sm cursor-pointer select-none">
                        Show code
                        <span class="text-gray-500 group-open:hidden">(click to expand)</span>
                        <span class="text-gray-500 hidden group-open:inline">(click to collapse)</span>
                    </summary>
                    <div class="relative mt-3">
                        <button class="absolute top-2 right-2 px-3 py-1.5 rounded border border-gray-300 bg-white hover:bg-gray-50 text-xs sm:text-sm"
                                @onclick="CopyStyleCode">Copy</button>
                        <pre id="code-style-pre" class="text-xs sm:text-sm text-gray-800 font-mono"><code>/* Dashboard Styles */
.kpi-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.kpi-card {
    padding: 1.5rem;
    border-radius: 0.5rem;
    border-left: 4px solid;
}

.kpi-label {
    font-size: 0.875rem;
    color: #6b7280;
    margin-bottom: 0.5rem;
}

.kpi-value {
    font-size: 2.5rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
}

.status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 600;
}

.status-scheduled { background: #dbeafe; color: #1e40af; }
.status-active { background: #d1fae5; color: #065f46; }
.status-delayed { background: #fee2e2; color: #991b1b; }

.driver-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 1rem;
}

.driver-card {
    padding: 1rem;
    border-radius: 0.5rem;
    text-align: center;
}

.driver-card.available {
    background: #d1fae5;
    border: 2px solid #10b981;
}

.driver-card.unavailable {
    background: #fee2e2;
    border: 2px solid #ef4444;
}</code></pre>
                    </div>
                </details>
            </div>
        </div>

        <div class="bg-white rounded-xl p-6 border border-gray-200 mb-6">
            <h2 class="text-xl sm:text-2xl font-bold text-gray-900 mb-4 break-words">
                üîë Key Takeaways
            </h2>
            <ul class="space-y-3 text-sm sm:text-base lg:text-lg text-gray-700">
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Use KPI cards to highlight important metrics</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">LINQ queries make data aggregation easy</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Conditional CSS classes provide visual feedback</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Filter data without database queries using LINQ</span>
                </li>
                <li class="flex items-start gap-2">
                    <span class="text-green-500 flex-shrink-0 mt-1">‚úì</span>
                    <span class="break-words min-w-0">Load related data with Include() for efficiency</span>
                </li>
            </ul>
        </div>

        <div class="bg-white rounded-xl p-6 border-2 border-green-200">
            <div class="flex flex-col sm:flex-row items-center justify-between gap-4">
                <div class="min-w-0 flex-1">
                    <h3 class="text-lg sm:text-xl font-bold text-gray-900 mb-2 break-words">üéâ Congratulations!</h3>
                    <p class="text-sm sm:text-base text-gray-600 break-words">You've completed all 13 steps of the
                        Blazor learning guide! Mark this final step complete to celebrate your achievement.</p>
                </div>
                @if (isComplete)
                {
                    <div class="flex items-center gap-3">
                        <span class="px-4 py-2 rounded-full bg-green-100 text-green-700 font-medium">‚úì Completed</span>
                        <button @onclick="@(async () => await ProgressService.MarkStepIncompleteAsync(13))"
                            class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm">Reset</button>
                    </div>
                }
                else
                {
                    <button @onclick="MarkComplete"
                        class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors">Mark
                        as Complete</button>
                }
            </div>
        </div>

        <!-- Navigation -->
        <div class="mt-8 flex items-center justify-between">
            <a href="/examples/step12" class="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                <span>‚Üê</span>
                Previous: Step 12
            </a>
            <a href="/guide" class="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                Back to Guide
                <span>üè†</span>
            </a>
        </div>
    </div>
</div>

@code {
    private bool isComplete = false;
    
    // --- Live Demo (Step 13) State ---
    private decimal s13CustomerRatePerMile = 2.10m;
    private List<DemoTrip> s13Trips = new();
    private Step13Totals s13Totals = new();
    private List<Step13DriverSummary> s13DriverSummaries = new();
    private decimal s13MaxProfit = 0m;

    protected override async Task OnInitializedAsync()
    {
        var step = await ProgressService.GetStepAsync(13);
        isComplete = step?.IsComplete ?? false;

        InitializeS13Trips();
        RecomputeS13();
    }

    private async Task MarkComplete()
    {
        await ProgressService.MarkStepCompleteAsync(13);
        isComplete = true;
    }

    // JS interop for copy buttons
    private IJSObjectReference? _module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Examples/Step13Example.razor.js");
        }
    }

    private async Task CopyCompCode()
    {
        if (_module is not null)
            await _module.InvokeVoidAsync("copyById", "code-comp-pre");
    }

    private async Task CopyLogicCode()
    {
        if (_module is not null)
            await _module.InvokeVoidAsync("copyById", "code-logic-pre");
    }

    private async Task CopyStyleCode()
    {
        if (_module is not null)
            await _module.InvokeVoidAsync("copyById", "code-style-pre");
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            await _module.DisposeAsync();
        }
    }

    // --- Live Demo (Step 13) Logic ---
    private void InitializeS13Trips()
    {
        const decimal baseRatePerMile = 0.65m;
        const decimal overtimeRatePerHour = 30m;

        s13Trips = new()
        {
            new DemoTrip { Driver = "Alex", Miles = 420, RatePerMile = baseRatePerMile, PerDiem = 35m, OvertimeHours = 1m, OvertimeRatePerHour = overtimeRatePerHour, FuelCost = 160m },
            new DemoTrip { Driver = "Alex", Miles = 310, RatePerMile = baseRatePerMile, PerDiem = 35m, OvertimeHours = 0m, OvertimeRatePerHour = overtimeRatePerHour, FuelCost = 120m },
            new DemoTrip { Driver = "Sam",  Miles = 520, RatePerMile = baseRatePerMile, PerDiem = 45m, OvertimeHours = 2m, OvertimeRatePerHour = overtimeRatePerHour, FuelCost = 210m },
            new DemoTrip { Driver = "Sam",  Miles = 290, RatePerMile = baseRatePerMile, PerDiem = 35m, OvertimeHours = 0m, OvertimeRatePerHour = overtimeRatePerHour, FuelCost = 115m },
        };
    }

    private decimal ComputePay(DemoTrip t) => (t.Miles * t.RatePerMile) + (t.OvertimeHours * t.OvertimeRatePerHour) + t.PerDiem;

    private void RecomputeS13()
    {
        var totalMiles = s13Trips.Sum(t => t.Miles);
        var revenue = s13Trips.Sum(t => t.Miles * s13CustomerRatePerMile);
        var cost = s13Trips.Sum(ComputePay) + s13Trips.Sum(t => t.FuelCost);
        var profit = revenue - cost;

        s13Totals = new Step13Totals
        {
            TotalMiles = totalMiles,
            Revenue = revenue,
            Cost = cost,
            Profit = profit
        };

        s13DriverSummaries = s13Trips
            .GroupBy(t => t.Driver)
            .Select(g => new Step13DriverSummary
            {
                Driver = g.Key,
                Revenue = g.Sum(t => t.Miles * s13CustomerRatePerMile),
                Cost = g.Sum(ComputePay) + g.Sum(t => t.FuelCost)
            })
            .Select(r => new Step13DriverSummary
            {
                Driver = r.Driver,
                Revenue = r.Revenue,
                Cost = r.Cost,
                Profit = r.Revenue - r.Cost
            })
            .OrderByDescending(r => r.Profit)
            .ToList();

        s13MaxProfit = s13DriverSummaries.Any() ? s13DriverSummaries.Max(r => r.Profit) : 0m;
    }

    // Demo types (local)
    public class DemoTrip
    {
        public string Driver { get; set; } = string.Empty;
        public int Miles { get; set; }
        public decimal RatePerMile { get; set; }
        public decimal PerDiem { get; set; }
        public decimal OvertimeHours { get; set; }
        public decimal OvertimeRatePerHour { get; set; }
        public decimal FuelCost { get; set; }
    }

    public class Step13Totals
    {
        public int TotalMiles { get; set; }
        public decimal Revenue { get; set; }
        public decimal Cost { get; set; }
        public decimal Profit { get; set; }
    }

    public class Step13DriverSummary
    {
        public string Driver { get; set; } = string.Empty;
        public decimal Revenue { get; set; }
        public decimal Cost { get; set; }
        public decimal Profit { get; set; }
    }
}