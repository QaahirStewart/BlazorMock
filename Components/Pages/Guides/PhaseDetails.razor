@page "/guide/phase/{PhaseId}"
@rendermode InteractiveServer
@inject ILearningGuideService GuideService
@inject ILearningProgressService ProgressService
@inject NavigationManager Nav

@code {
    [Parameter] public string PhaseId { get; set; } = string.Empty;
    private Phase? phase;
    private List<StepProgress> steps = new();
    private int completedInPhase;

    protected override async Task OnInitializedAsync()
    {
        phase = GuideService.GetPhaseById(PhaseId);
        steps = await ProgressService.GetAllStepsAsync();
        completedInPhase = phase is null ? 0 : steps.Count(s => s.IsComplete && phase.StepNumbers.Contains(s.StepNumber));
    }

    private string StepHref(int n) => n == 0 ? "/examples/step0" : $"/examples/step{n}";

    // Styling helpers to match Guide page accents
    private static string PhasePillColors(string id) => id switch
    {
        "phase-1" => "bg-purple-50 text-purple-700 border border-purple-200",
        "phase-2" => "bg-blue-50 text-blue-700 border border-blue-200",
        "phase-3" => "bg-emerald-50 text-emerald-700 border border-emerald-200",
        _ => "bg-gray-50 text-gray-700 border border-gray-200"
    };

    private static string PhaseHeaderGradient(string id) => id switch
    {
        // Pair primary with a secondary for nicer blend
        "phase-1" => "bg-gradient-to-r from-purple-100 via-indigo-100 to-indigo-200",
        "phase-2" => "bg-gradient-to-r from-blue-100 via-sky-100 to-sky-200",
        "phase-3" => "bg-gradient-to-r from-emerald-100 via-teal-100 to-teal-200",
        _ => "bg-gradient-to-r from-gray-100 to-blue-100"
    };

    private static string PhaseGradient(string id) => id switch
    {
        "phase-1" => "bg-gradient-to-r from-purple-200 to-purple-400",
        "phase-2" => "bg-gradient-to-r from-blue-200 to-blue-400",
        "phase-3" => "bg-gradient-to-r from-emerald-200 to-emerald-400",
        _ => "bg-gradient-to-r from-gray-200 to-gray-300"
    };
}

@if (phase is null)
{
    <div class="max-w-5xl mx-auto px-4 py-10">
        <a href="/guide" class="text-blue-600 hover:underline">‚Üê Back to Guide</a>
        <h1 class="text-2xl font-bold mt-4">Phase not found</h1>
        <p class="text-gray-600">The phase you requested does not exist.</p>
    </div>
}
else
{
    <div class="min-h-screen py-8">
        <div class="w-full mx-auto px-4 max-w-5xl">
            <a href="/guide" class="inline-flex items-center gap-2 text-blue-600 hover:text-blue-700 mb-4">
                <span>‚Üê</span> Back to Guide
            </a>

            <!-- Phase Header styled like Guide's Phases Hub, with per-phase colors -->
            <div class="rounded-2xl p-5 sm:p-6 mb-8 @(PhaseHeaderGradient(phase.Id))">
                <div class="mb-2">
                    <span class="@("inline-flex items-center px-2 py-1 rounded-full text-xs font-medium " + PhasePillColors(phase.Id))">@phase.Subtitle</span>
                </div>
                <h1 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-2">@phase.Title</h1>
                <p class="text-sm sm:text-base text-gray-700 mb-3">@phase.Description</p>
                <div class="text-xs sm:text-sm text-gray-700"><strong>Progress:</strong> @completedInPhase/@phase.StepNumbers.Length</div>
            </div>

            @* Special Step 0 callout (keeps original style) *@
            @if (phase.StepNumbers.Contains(0))
            {
                <div class="bg-black/3 rounded-2xl p-6 mb-8">
                    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
                        <h3 class="text-xl sm:text-2xl font-semibold text-gray-800 flex items-center gap-2">
                            <span class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-gray-300 text-gray-700 text-sm">0</span>
                            üß∞ Step 0: Prerequisites & VS Code Setup
                        </h3>
                        <span class="px-3 py-1 rounded-full bg-blue-100 text-blue-700 text-sm font-medium">Setup</span>
                    </div>
                    <div class="bg-white rounded-xl p-5 border border-gray-200">
                        <p class="text-sm sm:text-base text-gray-700 mb-4 leading-relaxed break-words">
                            Get your machine ready: install the .NET SDK, Node.js (for Tailwind build), and VS Code with the C#,
                            Razor, and Tailwind CSS IntelliSense extensions.
                        </p>
                        <ul class="list-disc ml-5 text-sm sm:text-base text-gray-700 space-y-1 mb-4">
                            <li>Install .NET SDK (10.0+)</li>
                            <li>Install Node.js LTS and npm</li>
                            <li>Install VS Code + extensions: C#, Razor, Tailwind CSS IntelliSense</li>
                            <li>Verify tools: <span class="font-mono">dotnet --info</span>, <span class="font-mono">node -v</span>, <span class="font-mono">npm -v</span></li>
                        </ul>
                        <div class="flex flex-wrap gap-2">
                            <a href="https://dotnet.microsoft.com/download" target="_blank" rel="noopener noreferrer"
                               class="inline-flex items-center gap-2 px-4 py-2 bg-black/85 hover:bg-black text-white text-sm sm:text-base rounded-lg transition-colors">.NET Download ‚Üí</a>
                            <a href="https://nodejs.org/" target="_blank" rel="noopener noreferrer"
                               class="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm sm:text-base">Node.js (LTS) ‚Üí</a>
                            <a href="https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csdevkit" target="_blank" rel="noopener noreferrer"
                               class="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm sm:text-base">VS Code C# ‚Üí</a>
                        </div>
                        <p class="text-xs sm:text-sm text-gray-600 mt-3">See <span class="font-mono">Docs/Steps/Step00.md</span> for the full checklist.</p>
                    </div>
                </div>
            }

            <div class="grid sm:grid-cols-2 gap-4">
                @foreach (var n in phase.StepNumbers.Where(x => x != 0))
                {
                    var step = steps.FirstOrDefault(s => s.StepNumber == n);
                    bool done = step?.IsComplete == true;
                    <a href="@StepHref(n)"
                        class="group block rounded-2xl border border-gray-200 bg-white p-5 hover:shadow-sm transition">
                        <div class="flex items-center justify-between mb-2">
                            <div class="flex items-center gap-3">
                                <span
                                    class="inline-flex h-8 w-8 items-center justify-center rounded-full @(done ? "bg-green-500 text-white" : "bg-gray-200 text-gray-700")">@(done
                                                                ? "‚úì" : n.ToString())</span>
                                <h3 class="text-lg font-semibold text-gray-900">Step @n</h3>
                            </div>
                            <span class="text-gray-400 group-hover:text-gray-600">‚Üí</span>
                        </div>
                        <p class="text-sm text-gray-700">@step?.Title</p>
                    </a>
                }
            </div>
        </div>
    </div>
}