@page "/routes"
@using BlazorMock.Data
@using BlazorMock.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Routes</PageTitle>

<div class="min-h-screen">
    <h1 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-6 break-words">üõ£Ô∏è Routes</h1>

    <div class="bg-gray-50 border border-gray-200 rounded-2xl p-5 sm:p-6 mb-6">
        <h2 class="text-lg sm:text-xl font-semibold text-gray-800 mb-3">üìù Add Route</h2>
        <EditForm Model="newRoute" OnValidSubmit="AddRouteAsync">
            <DataAnnotationsValidator />
            <ValidationSummary class="mb-3 text-xs sm:text-sm text-red-600" />

            <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 mb-3">
                <div>
                    <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Route #</label>
                    <InputText class="w-full rounded-lg border border-gray-300 p-2" @bind-Value="newRoute.RouteNumber" />
                    <ValidationMessage For="() => newRoute.RouteNumber" class="text-xs text-red-600 mt-1" />
                </div>
                <div>
                    <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Type</label>
                    <InputSelect class="w-full rounded-lg border border-gray-300 p-2" @bind-Value="newRoute.Type">
                        @foreach (RouteType t in Enum.GetValues(typeof(RouteType)))
                        {
                            <option value="@t">@t</option>
                        }
                    </InputSelect>
                </div>
                <div>
                    <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Origin</label>
                    <InputText class="w-full rounded-lg border border-gray-300 p-2" @bind-Value="newRoute.Origin" />
                </div>
                <div>
                    <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Destination</label>
                    <InputText class="w-full rounded-lg border border-gray-300 p-2" @bind-Value="newRoute.Destination" />
                </div>
                <div>
                    <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Distance (mi)</label>
                    <InputNumber class="w-full rounded-lg border border-gray-300 p-2" @bind-Value="newRoute.DistanceMiles" />
                </div>
                <div>
                    <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Driver</label>
                    <InputSelect class="w-full rounded-lg border border-gray-300 p-2" @bind-Value="newRoute.DriverId">
                        <option value="">-- select --</option>
                        @foreach (var d in drivers)
                        {
                            <option value="@d.Id">@d.Name (@d.LicenseLevel)</option>
                        }
                    </InputSelect>
                </div>
                <div>
                    <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Truck</label>
                    <InputSelect class="w-full rounded-lg border border-gray-300 p-2" @bind-Value="newRoute.TruckId">
                        <option value="">-- select --</option>
                        @foreach (var t in trucks)
                        {
                            <option value="@t.Id">@t.GetDisplayName()</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="flex flex-wrap items-center gap-2">
                <button type="submit" class="px-4 py-2 text-sm sm:text-base rounded-lg bg-orange-600 hover:bg-orange-700 text-white transition-colors">Add Route</button>
                <button type="button" class="px-4 py-2 text-sm sm:text-base rounded-lg border" @onclick="ResetNewRoute">Reset</button>
            </div>
        </EditForm>
    </div>

    <div class="bg-white rounded-2xl border border-gray-200 p-4">
        <h2 class="text-lg sm:text-xl font-semibold text-gray-800 mb-3">üìã Current Routes</h2>
        <div class="overflow-x-auto">
            <table class="min-w-full border border-gray-200 rounded-xl overflow-hidden">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="text-left p-2 border-b">Route #</th>
                        <th class="text-left p-2 border-b">Summary</th>
                        <th class="text-left p-2 border-b">Driver</th>
                        <th class="text-left p-2 border-b">Truck</th>
                        <th class="text-left p-2 border-b">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (routes is null)
                    {
                        <tr><td colspan="5" class="p-3">Loading...</td></tr>
                    }
                    else if (!routes.Any())
                    {
                        <tr><td colspan="5" class="p-3">No routes yet.</td></tr>
                    }
                    else
                    {
                        @foreach (var r in routes)
                        {
                            var isEditing = editRoute?.Id == r.Id;
                            <tr class="odd:bg-white even:bg-gray-50 align-top">
                                <td class="p-2 border-b">
                                    @if (isEditing) { <InputText class="w-full rounded border border-gray-300 p-1.5" @bind-Value="editRoute!.RouteNumber" /> }
                                    else { @r.RouteNumber }
                                </td>
                                <td class="p-2 border-b">
                                    @if (isEditing)
                                    {
                                        <div class="grid grid-cols-1 gap-1">
                                            <div>
                                                <label class="block text-xs text-gray-600">Type</label>
                                                <InputSelect class="w-full rounded border border-gray-300 p-1.5" @bind-Value="editRoute!.Type">
                                                    @foreach (RouteType t in Enum.GetValues(typeof(RouteType)))
                                                    {
                                                        <option value="@t">@t</option>
                                                    }
                                                </InputSelect>
                                            </div>
                                            <div class="grid grid-cols-2 gap-2">
                                                <div>
                                                    <label class="block text-xs text-gray-600">Origin</label>
                                                    <InputText class="w-full rounded border border-gray-300 p-1.5" @bind-Value="editRoute!.Origin" />
                                                </div>
                                                <div>
                                                    <label class="block text-xs text-gray-600">Destination</label>
                                                    <InputText class="w-full rounded border border-gray-300 p-1.5" @bind-Value="editRoute!.Destination" />
                                                </div>
                                            </div>
                                            <div>
                                                <label class="block text-xs text-gray-600">Distance (mi)</label>
                                                <InputNumber class="w-28 rounded border border-gray-300 p-1.5" @bind-Value="editRoute!.DistanceMiles" />
                                            </div>
                                        </div>
                                    }
                                    else { @r.GetRouteSummary() }
                                </td>
                                <td class="p-2 border-b">
                                    @if (isEditing)
                                    {
                                        <InputSelect class="w-full rounded border border-gray-300 p-1.5" @bind-Value="editRoute!.DriverId">
                                            @foreach (var d in drivers)
                                            {
                                                <option value="@d.Id">@d.Name (@d.LicenseLevel)</option>
                                            }
                                        </InputSelect>
                                    }
                                    else { @r.Driver?.Name }
                                </td>
                                <td class="p-2 border-b">
                                    @if (isEditing)
                                    {
                                        <InputSelect class="w-full rounded border border-gray-300 p-1.5" @bind-Value="editRoute!.TruckId">
                                            @foreach (var t in trucks)
                                            {
                                                <option value="@t.Id">@t.GetDisplayName()</option>
                                            }
                                        </InputSelect>
                                    }
                                    else { @r.Truck?.GetDisplayName() }
                                </td>
                                <td class="p-2 border-b whitespace-nowrap">
                                    @if (isEditing)
                                    {
                                        <button class="px-3 py-1 rounded bg-green-600 text-white mr-1" @onclick="() => SaveEditAsync(r.Id)">Save</button>
                                        <button class="px-3 py-1 rounded border" @onclick="CancelEdit">Cancel</button>
                                    }
                                    else
                                    {
                                        <button class="px-3 py-1 rounded border mr-1" @onclick="() => BeginEdit(r)">Edit</button>
                                        <button class="px-3 py-1 rounded border hover:bg-gray-50" @onclick="() => DeleteRouteAsync(r.Id)">Delete</button>
                                    }
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<Route> routes = new();
    private List<Driver> drivers = new();
    private List<Truck> trucks = new();
    private Route newRoute = new() { Type = RouteType.Standard, ScheduledStartDate = DateTime.Now, Status = RouteStatus.Scheduled };
    private Route? editRoute;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        using var db = await DbFactory.CreateDbContextAsync();
        routes = await db.Routes.Include(r => r.Driver).Include(r => r.Truck).OrderBy(r => r.RouteNumber).ToListAsync();
        drivers = await db.Drivers.OrderBy(d => d.Name).ToListAsync();
        trucks = await db.Trucks.OrderBy(t => t.TruckNumber).ToListAsync();
    }

    private async Task AddRouteAsync()
    {
        using var db = await DbFactory.CreateDbContextAsync();
        db.Routes.Add(newRoute);
        await db.SaveChangesAsync();
        newRoute = new() { Type = RouteType.Standard, ScheduledStartDate = DateTime.Now, Status = RouteStatus.Scheduled };
        await LoadAsync();
    }

    private void ResetNewRoute()
    {
        newRoute = new() { Type = RouteType.Standard, ScheduledStartDate = DateTime.Now, Status = RouteStatus.Scheduled };
    }

    private async Task DeleteRouteAsync(int id)
    {
        using var db = await DbFactory.CreateDbContextAsync();
        var entity = await db.Routes.FindAsync(id);
        if (entity is not null)
        {
            db.Remove(entity);
            await db.SaveChangesAsync();
            await LoadAsync();
        }
    }

    private void BeginEdit(Route r)
    {
        editRoute = new Route
        {
            Id = r.Id,
            RouteNumber = r.RouteNumber,
            Type = r.Type,
            Origin = r.Origin,
            Destination = r.Destination,
            DistanceMiles = r.DistanceMiles,
            DriverId = r.DriverId,
            TruckId = r.TruckId,
            ScheduledStartDate = r.ScheduledStartDate,
            Status = r.Status,
            EstimatedEndDate = r.EstimatedEndDate,
            ActualStartDate = r.ActualStartDate,
            ActualEndDate = r.ActualEndDate,
            EstimatedFuelCost = r.EstimatedFuelCost,
            DriverPay = r.DriverPay,
            Revenue = r.Revenue,
            Notes = r.Notes
        };
    }

    private void CancelEdit() => editRoute = null;

    private async Task SaveEditAsync(int id)
    {
        if (editRoute is null) return;
        using var db = await DbFactory.CreateDbContextAsync();
        var entity = await db.Routes.FindAsync(id);
        if (entity is null) return;

        entity.RouteNumber = editRoute.RouteNumber;
        entity.Type = editRoute.Type;
        entity.Origin = editRoute.Origin;
        entity.Destination = editRoute.Destination;
        entity.DistanceMiles = editRoute.DistanceMiles;
        entity.DriverId = editRoute.DriverId;
        entity.TruckId = editRoute.TruckId;
        // keep other scheduling/cost fields as-is for now

        await db.SaveChangesAsync();
        editRoute = null;
        await LoadAsync();
    }
}